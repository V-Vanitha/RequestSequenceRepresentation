{
	"info": {
		"_postman_id": "70a90e9d-ab3d-4011-b11c-f1118a5cff0d",
		"name": "RequestSequenceRepresentation+testcases",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16731944"
	},
	"item": [
		{
			"name": "UserInput",
			"item": [
				{
					"name": "for loading user input",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"\\n\\n\\n===========================================================================================\");\r",
									"console.log(\"====================================== RequestSequenceRepresentation ====================================\");\r",
									"console.log(\"==========================================================================================\");\r",
									"/****************************************************************************************\r",
									"* Loading Input Data from File\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    var inputFromFile;\r",
									"    inputFromFile = data;\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Input data could not be loaded.\");\r",
									"}\r",
									"/****************************************************************************************\r",
									"* Defining constants \r",
									"****************************************************************************************/\r",
									"const RETRY_MAXCOUNT = 3;\r",
									"const RETRY_WAITING_PERIOD = 3*1000;\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Environmental Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.environment.clear();\r",
									"\r",
									"    let TYPE_OF_TESTING;\r",
									"    TYPE_OF_TESTING = inputFromFile.typeOfTesting;  // Data file should contain either \"Acceptance\" or \"Continuous Integration\".\r",
									"                                                    // In case of \"Acceptance\", Continuous Integration test cases would be executed, too.\r",
									"\r",
									"    let APPLICATION;\r",
									"    APPLICATION = inputFromFile.application;\r",
									"\r",
									"    let DUMMY_URI;\r",
									"    DUMMY_URI = inputFromFile.dummyUrl;\r",
									"\r",
									"    pm.environment.set(\"typeOfTesting\", TYPE_OF_TESTING);\r",
									"    pm.environment.set(\"application\", APPLICATION);\r",
									"    pm.environment.set(\"dummyUri\", DUMMY_URI);\r",
									"\r",
									"    pm.environment.set(\"retryMaxCount\", RETRY_MAXCOUNT);\r",
									"    pm.environment.set(\"retryWaitingPeriod\", RETRY_WAITING_PERIOD);\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(error)\r",
									"    console.log(\"! Environment variables could not be set.\");\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Collection Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.collectionVariables.clear();\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Collection variables could not be set.\");\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.variables.clear();\r",
									"\r",
									"    let URI;\r",
									"    URI = pm.environment.get(\"dummyUri\");\r",
									"\r",
									"    pm.variables.set(\"uri\", URI);\r",
									"    pm.request.headers.upsert({ key: \"Authorization\", value: \"\" });\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Local variables could not be set.\");\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "functions()",
			"item": []
		},
		{
			"name": "ServiceLayer",
			"item": [
				{
					"name": "IndividualPart",
					"item": [
						{
							"name": "/v1/update-flow-visualization-page",
							"item": [
								{
									"name": "Continuous Integration",
									"item": [
										{
											"name": "Service Idempotent?",
											"item": [
												{
													"name": "Expected  /v1/update-flow-visualization-page- service idempotent?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  /v1/update-flow-visualization-page integration -- is service idempotent? -------------------------------\");/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var dummyXCorrelator;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    dummyXCorrelator = CreateXCorrelator();\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"x-correlator\" : ' + '\"' + dummyXCorrelator + '\"'\r",
																	"        + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/update-flow-visualization-page\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/update-flow-visualization-page responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Is service idempotent?\n#### Preparation:\n  - POST /v1/update-flow-visualization-page\n    - auth-code from input load-file\n    - random generated x-correlator\n    - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==200\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "request header parameter completeness",
											"item": [
												{
													"name": "Expected  /v1/update-flow-visualization-page- request header parameter completeness",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  /v1/update-flow-visualization-page integration -- request headers parameters completeness -------------------------------\");/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var dummyXCorrelator;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    dummyXCorrelator = CreateXCorrelator();\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"x-correlator\" : ' + '\"' + dummyXCorrelator + '\"'\r",
																	"        + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/update-flow-visualization-page\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let parameters;\r",
																	"    parameters = [\"user\", \"originator\", \"x-correlator\", \"trace-indicator\", \"customer-journey\"];\r",
																	"\r",
																	"    let missingParameter;\r",
																	"    missingParameter = GetMissingParameter(parameters);\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"    pm.request.headers.remove(missingParameter);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GetMissingParameter(parameters) {\r",
																	"    let missingParameter;\r",
																	"    missingParameter = parameters[Math.floor(Math.random()*parameters.length)];\r",
																	"    return missingParameter;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST  /v1/update-flow-visualization-page responds 400, because of missing parameter\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Get parameters checked for completeness?\n#### Preparation:\n  - POST /v1/update-flow-visualization-page\n    - auth-code from input load-file\n    - random generated x-correlator    \n   -  BUT one randomly chosen parameter (user, originator, x-correlator, trace-indicator or customer-journey) missing (not empty string!)\n\n#### Testing:\n- checking for ResponseCode == 400\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "originator parameter correctness",
											"item": [
												{
													"name": "Expected  /v1/update-flow-visualization-page too short originator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  /v1/update-flow-visualization-page integration -- originator correctness check -------------------------------\");\r",
																	"console.log(\"\\n----- originator parameter correctness check - length too short -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var dummyXCorrelator;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    dummyXCorrelator = CreateXCorrelator();\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var FAULTY_ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    FAULTY_ORIGINATOR = GenerateFaultyOriginator();\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"x-correlator\" : ' + '\"' + dummyXCorrelator + '\"'\r",
																	"        + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/update-flow-visualization-page\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:FAULTY_ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function GenerateFaultyOriginator() {\r",
																	"    let faultyOriginator;\r",
																	"    let length;\r",
																	"    let minLength;\r",
																	"    minLength = 0;\r",
																	"    let maxLength;\r",
																	"    maxLength = 2;\r",
																	"    length = Math.floor(Math.random() * maxLength) + minLength;\r",
																	"    faultyOriginator = GenerateRandomString(length);\r",
																	"    return faultyOriginator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/update-flow-visualization-page responds 400, because of faulty originator parameter(too short string)\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets originator checked for compliance with specification?\n#### Preparation:\n  - POST /v1/update-flow-visualization-page\n    - auth-code from input load-file\n    - random generated x-correlator\n      - all parameters with realistic values, BUT \n          1.  originator set to be a string of 0, 1 or 2 (random) letters length (too short).\n#### Testing:\n- checking for ResponseCode==400\n#### Clearing:\n- not applicable"
										},
										{
											"name": "x-correlator pattern",
											"item": [
												{
													"name": "Expected  /v1/update-flow-visualization-page with Too short x-correlator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/update-flow-visualization-page integration -- x-correlator pattern correctness check -------------------------------\");\r",
																	"console.log(\"\\n----- x-correlator parameter correctness check - too short -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var dummyXCorrelator;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    dummyXCorrelator = CreateXCorrelator();\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var FAULTY_X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    FAULTY_X_CORRELATOR = GenerateFaultyXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"x-correlator\" : ' + '\"' + dummyXCorrelator + '\"'\r",
																	"        + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/update-flow-visualization-page\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:FAULTY_X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function GenerateFaultyXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/update-flow-visualization-page responds 400, because of too short x-correlator value) \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/update-flow-visualization-page with Too long x-correlator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- x-correlator parameter correctness check - too long -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var dummyXCorrelator;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    dummyXCorrelator = CreateXCorrelator();\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var FAULTY_X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    FAULTY_X_CORRELATOR = GenerateFaultyXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"x-correlator\" : ' + '\"' + dummyXCorrelator + '\"'\r",
																	"        + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/update-flow-visualization-page\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:FAULTY_X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function GenerateFaultyXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/update-flow-visualization-page responds 400, because of too long x-correlator value) \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/update-flow-visualization-page with incorrect characters count x-correlator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- x-correlator parameter correctness check - incorrect characters count -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var dummyXCorrelator;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    dummyXCorrelator = CreateXCorrelator();\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var FAULTY_X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    FAULTY_X_CORRELATOR = GenerateFaultyXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"x-correlator\" : ' + '\"' + dummyXCorrelator + '\"'\r",
																	"        + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/update-flow-visualization-page\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:FAULTY_X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function GenerateFaultyXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"\r",
																	"    let faultyElementLength;\r",
																	"    faultyElementLength = Math.floor(Math.random() * 3) + 1;\r",
																	"    let faultyElement;\r",
																	"    faultyElement = GenerateRandomHexString(faultyElementLength);\r",
																	"\r",
																	"    let xCorrelatorParts;\r",
																	"    xCorrelatorParts = xCorrelator.split(\"-\");\r",
																	"    let faultyXCorrelatorPart;\r",
																	"    faultyXCorrelatorPart = Math.floor(Math.random() * xCorrelatorParts.length);\r",
																	"\r",
																	"    xCorrelatorParts[faultyXCorrelatorPart] = faultyElement;\r",
																	"    xCorrelator = xCorrelatorParts.join(\"-\");\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/update-flow-visualization-page responds 400, because of incorrect character count of x-correlator value) \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/update-flow-visualization-page with incorrect separator x-correlator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- x-correlator parameter correctness check - incorrect separator -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var dummyXCorrelator;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    dummyXCorrelator = CreateXCorrelator();\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var FAULTY_X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    FAULTY_X_CORRELATOR = GenerateFaultyXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"x-correlator\" : ' + '\"' + dummyXCorrelator + '\"'\r",
																	"        + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/update-flow-visualization-page\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:FAULTY_X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function GenerateFaultyXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"\r",
																	"    let separators;\r",
																	"    separators = \".:;/\";\r",
																	"    let separatorsLength;\r",
																	"    separatorsLength = separators.length;\r",
																	"\r",
																	"    let faultySeparator;\r",
																	"    faultySeparator = separators.charAt(Math.floor(Math.random() * separatorsLength));\r",
																	"\r",
																	"    xCorrelator += GenerateRandomHexString(8) + faultySeparator;\r",
																	"    xCorrelator += GenerateRandomHexString(4) + faultySeparator;\r",
																	"    xCorrelator += GenerateRandomHexString(4) + faultySeparator;\r",
																	"    xCorrelator += GenerateRandomHexString(4) + faultySeparator;\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/update-flow-visualization-page responds 400, because of incorrect separator in x-correlator value) \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets x-correlator checked for complying the pattern?\n#### Preparation:\n  - POST /v1/update-flow-visualization-page\n    - auth-code from input load-file\n    - random generated x-correlator\n    - reasonable parameters, BUT dummyXCorrelators differing from the pattern in various ways (e.g. empty string)\n#### Testing:\n- checking for ResponseCode==400\n#### Clearing:\n- not applicable"
										},
										{
											"name": "trace-indicator pattern",
											"item": [
												{
													"name": "Expected  /v1/update-flow-visualization-page with letters in trace-indicator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/update-flow-visualization-page integration -- trace-indicator pattern correctness check -------------------------------\");\r",
																	"console.log(\"\\n----- trace-indicator parameter correctness check - presence of letters -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var dummyXCorrelator;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    dummyXCorrelator = CreateXCorrelator();\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var FAULTY_TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    FAULTY_TRACE_INDICATOR = GenerateFaultyTraceIndicator();\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"x-correlator\" : ' + '\"' + dummyXCorrelator + '\"'\r",
																	"        + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/update-flow-visualization-page\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:FAULTY_TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function GenerateFaultyTraceIndicator() {\r",
																	"    let traceIndicator;\r",
																	"    traceIndicator = \"\";\r",
																	"\r",
																	"    let traceIndicatorParts;\r",
																	"    traceIndicatorParts = [];\r",
																	"    for(let i=0; i<3; i++) {\r",
																	"        traceIndicatorParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    let characters;\r",
																	"    characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"    let charactersLength;\r",
																	"    charactersLength = characters.length;\r",
																	"    let faultyElement;\r",
																	"    faultyElement = characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"\r",
																	"    let faultyTraceIndicatorPart;\r",
																	"    faultyTraceIndicatorPart = Math.floor(Math.random() * 3);\r",
																	"\r",
																	"    traceIndicatorParts[faultyTraceIndicatorPart] = faultyElement;\r",
																	"    traceIndicator = traceIndicatorParts.join(\".\");\r",
																	"\r",
																	"    return traceIndicator;\r",
																	"}\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/update-flow-visualization-page responds 400, because of presence of letters in trace-indicator value) \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/update-flow-visualization-page with incorrect separator trace-indicator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- trace-indicator parameter correctness check - incorrect separator -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var dummyXCorrelator;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    dummyXCorrelator = CreateXCorrelator();\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var FAULTY_TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    FAULTY_TRACE_INDICATOR = GenerateFaultyTraceIndicator();\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"x-correlator\" : ' + '\"' + dummyXCorrelator + '\"'\r",
																	"        + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/update-flow-visualization-page\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:FAULTY_TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function GenerateFaultyTraceIndicator() {\r",
																	"    let traceIndicator;\r",
																	"    traceIndicator = \"\";\r",
																	"\r",
																	"    let traceIndicatorParts;\r",
																	"    traceIndicatorParts = [];\r",
																	"    for(let i=0; i<3; i++) {\r",
																	"        traceIndicatorParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    let separators;\r",
																	"    separators = \"-:;/\";\r",
																	"    let separatorsLength;\r",
																	"    separatorsLength = separators.length;\r",
																	"\r",
																	"    let faultySeparator;\r",
																	"    faultySeparator = separators.charAt(Math.floor(Math.random() * separatorsLength));\r",
																	"\r",
																	"    traceIndicator = traceIndicatorParts.join(faultySeparator);\r",
																	"\r",
																	"    return traceIndicator;\r",
																	"}\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/update-flow-visualization-page responds 400, because of incorrect separator in trace-indicator value) \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets trace-indicator checked for complying the pattern?\n#### Preparation:\n  - POST /v1/update-flow-visualization-page\n    - auth-code from input load-file\n    - random generated x-correlator\n       - reasonable parameters, BUT dummyTraceIndicator differing from the pattern in various ways (e.g. empty string)\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "auth-code missing?",
											"item": [
												{
													"name": "Expected /v1/update-flow-visualization-page - security key missing?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/update-flow-visualization-page integration -- auth-oode missing? -------------------------------\");/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var dummyXCorrelator;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    dummyXCorrelator = CreateXCorrelator();\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"x-correlator\" : ' + '\"' + dummyXCorrelator + '\"'\r",
																	"        + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/update-flow-visualization-page\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/update-flow-visualization-page responds 401, because of missing operation-key\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(401);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "401",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets security key checked for availability?\n#### Preparation:\n  - POST /v1/update-flow-visualization-page\n    - random generated x-correlator\n     - reasonable parameters\n    - BUT auth-code parameter missing (does not mean empty string)\n\n#### Testing:\n- checking for ResponseCode==401\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "auth-code checked?",
											"item": [
												{
													"name": "Expected  /v1/update-flow-visualization-page- security key checked?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/update-flow-visualization-page integration -- auth-code checked? -------------------------------\");/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var dummyXCorrelator;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    dummyXCorrelator = CreateXCorrelator();\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"x-correlator\" : ' + '\"' + dummyXCorrelator + '\"'\r",
																	"        + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy security key\r",
																	"****************************************************************************************/\r",
																	"var FAULTY_AUTHORIZATION_CODE;\r",
																	"try {\r",
																	"    FAULTY_AUTHORIZATION_CODE = \"Basic \" + GenerateRandomHexString(32);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy value for operationKey. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/update-flow-visualization-page\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = FAULTY_AUTHORIZATION_CODE;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/update-flow-visualization-page responds 401, because of incorrect operation-key\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(401);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "401",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets security key checked for correctness?\n#### Preparation:\n  - POST /v1/update-flow-visualization-page\n    - random generated x-correlator\n    - reasonable parameters\n      - BUT auth-code parameter with random dummy value\n\n#### Testing:\n- checking for ResponseCode==401\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "response header completeness",
											"item": [
												{
													"name": "Expected  /v1/update-flow-visualization-page response header parameter completeness",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/update-flow-visualization-page integration -- response header completeness -------------------------------\");/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var dummyXCorrelator;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    dummyXCorrelator = CreateXCorrelator();\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"x-correlator\" : ' + '\"' + dummyXCorrelator + '\"'\r",
																	"        + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/update-flow-visualization-page\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var response;\r",
																	"try {\r",
																	"    response = pm.response;\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/update-flow-visualization-page responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"    pm.test(\"Response headers contain 'x-correlator'\", function () {\r",
																	"        response.to.have.header(\"x-correlator\");\r",
																	"    });\r",
																	"    pm.test(\"Response headers contain 'exec-time'\", function () {\r",
																	"        response.to.have.header(\"exec-time\");\r",
																	"    });\r",
																	"    pm.test(\"Response headers contain 'backend-time'\", function () {\r",
																	"        response.to.have.header(\"backend-time\");\r",
																	"    });\r",
																	"    pm.test(\"Response headers contain 'life-cycle-state'\", function () {\r",
																	"        response.to.have.header(\"life-cycle-state\");\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Contains response complete set of headers?\n#### Preparation:\n  - POST /v1/update-flow-visualization-page\n    - auth-code from input load-file\n    - random generated x-correlator\n    - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==200\n- checking for ResponseHeaders (x-correlator, exec-time, backend-time and life-cycle-state) being present and checking for correctness of type of each parameter.\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "x-correlator responded?",
											"item": [
												{
													"name": "Expected /v1/update-flow-visualization-page - correct x-correlator responded?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/update-flow-visualization-page integration -- x-correlator responded? -------------------------------\");/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var dummyXCorrelator;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    dummyXCorrelator = CreateXCorrelator();\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"x-correlator\" : ' + '\"' + dummyXCorrelator + '\"'\r",
																	"        + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
																	"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
																	"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
																	"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
																	"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/update-flow-visualization-page\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedXCorrelator;\r",
																	"try {\r",
																	"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
																	"   \r",
																	"} catch(error) {\r",
																	"    console.log(\"! Could not load input data. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var actualXCorrelator;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    let RESPONSE_HEADERS;\r",
																	"    RESPONSE_HEADERS = pm.response.headers;  \r",
																	"    \r",
																	"    actualXCorrelator = RESPONSE_HEADERS.get(\"x-correlator\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/update-flow-visualization-page responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"    pm.test(\"Provides expected x-correlator: \" + expectedXCorrelator, function () {\r",
																	"        pm.expect(actualXCorrelator).to.equal(expectedXCorrelator);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Is the initial x-correlator ín the response?\n#### Preparation:\n  - POST /v1/update-flow-visualization-page\n    - auth-code from input load-file\n    - random generated x-correlator\n    - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==200\n- checking for response headers containing x-correlator==dummyXCorrelator\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "life-cycle-state responded?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/update-flow-visualization-page integration -- life-cycle-state responded? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/update-flow-visualization-page\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/update-flow-visualization-page correct life-cycle-state responded?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var dummyXCorrelator;\r",
																	"var LIFE_CYCLE_STATE;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"\r",
																	"    dummyXCorrelator = CreateXCorrelator();\r",
																	"\r",
																	"    let lifeCycleState;\r",
																	"    lifeCycleState = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"life-cycle-state\"];\r",
																	"    let prefixLength = ('operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_').length;     \r",
																	"    LIFE_CYCLE_STATE = lifeCycleState.substring(prefixLength);\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"x-correlator\" : ' + '\"' + dummyXCorrelator + '\"'\r",
																	"        + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"expectedLifeCycleState\", LIFE_CYCLE_STATE);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/update-flow-visualization-page\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedLifeCycleState;\r",
																	"try {\r",
																	"    expectedLifeCycleState = pm.collectionVariables.get(\"expectedLifeCycleState\");\r",
																	"   \r",
																	"} catch(error) {\r",
																	"    console.log(\"! Could not load input data. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var actualLifeCycleState;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    let RESPONSE_HEADERS;\r",
																	"    RESPONSE_HEADERS = pm.response.headers;  \r",
																	"    \r",
																	"    actualLifeCycleState = RESPONSE_HEADERS.get(\"life-cycle-state\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/update-flow-visualization-page responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"    pm.test(\"Provides expected life-cycle-state: \" + expectedLifeCycleState, function () {\r",
																	"        pm.expect(actualLifeCycleState).to.equal(expectedLifeCycleState);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Is the correct life-cycle-state ín the response?\n#### Preparation:\n  - POST /v1/update-flow-visualization-page\n    - auth-code from input load-file\n    - random generated x-correlator\n    - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==200\n- checking for response headers containing life-cycle-state is equal to the value as present in the control-construct for /v1/update-flow-visualization-page/configuration/life-cycle-state\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "Request notified?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/update-flow-visualization-page integration -- request notified? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var executionAndTraceLogHttpClientLtp;\r",
																	"var executionAndTraceLogTcpClientLtp;\r",
																	"var httpServerLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/update-flow-visualization-page\", ltpList);\r",
																	"    httpServerLtp = FindHttpServerLtp(ltpList);\r",
																	"\r",
																	"    let recordServiceRequestOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLoggingRequest\", fcList, ltpList);\r",
																	"    executionAndTraceLogHttpClientLtp = FindServingLtp(recordServiceRequestOperationClientLtp, ltpList);\r",
																	"    executionAndTraceLogTcpClientLtp = FindServingLtp(executionAndTraceLogHttpClientLtp, ltpList); \r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"executionAndTraceLogHttpClientLtp\", executionAndTraceLogHttpClientLtp);\r",
																	"    pm.collectionVariables.set(\"executionAndTraceLogTcpClientLtp\", executionAndTraceLogTcpClientLtp);\r",
																	"    pm.collectionVariables.set(\"httpServerLtp\", httpServerLtp);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindHttpServerLtp(ltpList) {\r",
																	"    let httpServerLtp;\r",
																	"    httpServerLtp = {};\r",
																	"    try {\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"http-s-\")) {\r",
																	"                httpServerLtp = ltpList[i];\r",
																	"                return httpServerLtp;\r",
																	"            }\r",
																	"        } \r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindHttpServerLtp. \");\r",
																	"    }\r",
																	"    return httpServerLtp;\r",
																	"}\r",
																	"\r",
																	"function FindHttpClientForApplicationName(applicationName, ltpList) {\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = {};\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"http-c-\")) {\r",
																	"                let sampleApplicationName;\r",
																	"                sampleApplicationName = ltpList[i][\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-capability\"][\"application-name\"];\r",
																	"                if(sampleApplicationName == applicationName) {\r",
																	"                    httpClientLtp = ltpList[i];\r",
																	"                    return httpClientLtp;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindHttpClientForApplicationName. \");\r",
																	"    }\r",
																	"    return httpClientLtp;\r",
																	"}\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	"\r",
																	"function FindOperationServerLtp(ltpList, operationName) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName.includes(operationName)) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServerLtp. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindOperationClientLtp(serverLtp, ltpList, operationName) {\r",
																	"    let operationClientLtp;\r",
																	"    operationClientLtp = {};\r",
																	"    try {\r",
																	"        let clientLtpList;\r",
																	"        clientLtpList = serverLtp[\"client-ltp\"];\r",
																	"        let operationClientInstances;\r",
																	"        operationClientInstances = [];\r",
																	"        for ( let i=0; i<clientLtpList.length; i++ ) {\r",
																	"            for ( let j=0; j<ltpList.length; j++ ) {\r",
																	"                if( ltpList[j][\"uuid\"].includes(\"-op-c-\") ) {\r",
																	"                    if( ltpList[j][\"uuid\"] == clientLtpList[i] ) {\r",
																	"                        operationClientInstances.push(ltpList[j]);\r",
																	"                        break;\r",
																	"                    }\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"        for( let i=0; i<operationClientInstances.length; i++ ) {\r",
																	"            let sampleOperationName;\r",
																	"            sampleOperationName = operationClientInstances[i][\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
																	"            if(sampleOperationName.includes(operationName)) {\r",
																	"                operationClientLtp = operationClientInstances[i];\r",
																	"                return operationClientLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindOperationClientLtp. \")\r",
																	"    }\r",
																	"    return operationClientLtp;\r",
																	"}\r",
																	"\r",
																	"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
																	"    let operationClientLtp\r",
																	"    try {\r",
																	"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
																	"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"    } catch (error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
																	"    }\r",
																	"    return  operationClientLtp\r",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "reference ExecutionAndTraceLog/core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var AUTHORIZATION;\r",
																	"var applicationProtocol;\r",
																	"var applicationAddress;\r",
																	"var applicationPort;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let executionAndTraceLogTcpClientLtp;\r",
																	"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																	"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    if(applicationAddress.hasOwnProperty(\"ip-address\")){\r",
																	"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																	"    }else{\r",
																	"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																	"     }\r",
																	"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	" \r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = applicationProtocol + \"://\"+ applicationAddress + \":\" + applicationPort + \"/core-model-1-4:control-construct\";\r",
																	"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io\" + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var listRecordsOfFlowOperationKey;\r",
																	"try {\r",
																	"    listRecordsOfFlowOperationKey = FindOperationKeyForOperationName(\"/v1/list-records-of-flow\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"listRecordsOfFlowOperationKey\", listRecordsOfFlowOperationKey);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function FindOperationKeyForOperationName(operationName, ltpList) {\r",
																	"    let operationKey;\r",
																	"    operationKey = \"\";\r",
																	"    try {\r",
																	"         let sampleUuid;\r",
																	"         for ( let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")){\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationKey = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"                    return operationKey; \r",
																	"                }\r",
																	"            }\r",
																	"         }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\" ! Exception in function : FindOperationKeyForOperationName\")\r",
																	"    }\r",
																	"    return operationKey;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "sampling /v1/update-flow-visualization-page",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var dummyXCorrelator;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    dummyXCorrelator = CreateXCorrelator();\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"x-correlator\" : ' + '\"' + dummyXCorrelator + '\"'\r",
																	"        + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
																	"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
																	"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
																	"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
																	"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/update-flow-visualization-page\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected ExecutionAndTraceLog/v1/list-records-of-flow",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationProtocol;\r",
																	"var applicationAddress;\r",
																	"var applicationPort;\r",
																	"var xCorrelatorUnderTest;\r",
																	"var latestMatch;\r",
																	"var numberOfRecords;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let executionAndTraceLogTcpClientLtp;\r",
																	"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																	"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    if(applicationAddress.hasOwnProperty(\"ip-address\")){\r",
																	"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																	"    }else{\r",
																	"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																	"     }\r",
																	"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"    OPERATION_KEY = pm.collectionVariables.get(\"listRecordsOfFlowOperationKey\");\r",
																	"    xCorrelatorUnderTest = pm.collectionVariables.get(\"xCorrelator\");\r",
																	"    latestMatch = 0;\r",
																	"    numberOfRecords = 100;\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"                + '\"x-correlator\": \"' + xCorrelatorUnderTest +'\",'\r",
																	"                + '\"latest-match\": ' + latestMatch +','\r",
																	"                + '\"number-of-records\": ' + numberOfRecords \r",
																	"                + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"/****************************************************************************************\r",
																	"* Setting delay\r",
																	"****************************************************************************************/\r",
																	"setTimeout(function(){\r",
																	"\r",
																	"}, 3000);\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/v1/list-records-of-flow\";\r",
																	"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io/v1/list-records-of-flow\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0, length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedXCorrelator;\r",
																	"var expectedUser;\r",
																	"var expectedOriginator;\r",
																	"var expectedTraceIndicator;\r",
																	"var expectedApplicationName;\r",
																	"var expectedReleaseNumber;\r",
																	"var expectedOperationName;\r",
																	"try {\r",
																	"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
																	"    expectedUser = pm.collectionVariables.get(\"user\");\r",
																	"    expectedOriginator = pm.collectionVariables.get(\"originator\");\r",
																	"    expectedTraceIndicator = pm.collectionVariables.get(\"traceIndicator\");\r",
																	"\r",
																	"    let expectedHttpServerLtp;\r",
																	"    expectedHttpServerLtp = pm.collectionVariables.get(\"httpServerLtp\");\r",
																	"    expectedApplicationName = expectedHttpServerLtp[\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
																	"    expectedReleaseNumber = expectedHttpServerLtp[\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"release-number\"];\r",
																	"\r",
																	"    let expectedOperationServer;\r",
																	"    expectedOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    expectedOperationName = expectedOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not load Input Data. \");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var serviceRecordList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    if(Math.floor(RESPONSE_CODE/100) === 2) {\r",
																	"        serviceRecordList = JSON.parse(response.stream);\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST ExecutionAndTraceLog/v1/list-records-of-flow responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"\r",
																	"    let foundAnEntryWithTheExpectedHeaderValuesInEatl;\r",
																	"    foundAnEntryWithTheExpectedHeaderValuesInEatl = false;\r",
																	"    let responseCodeofTriggeredForwarding;\r",
																	"    responseCodeofTriggeredForwarding = 0;\r",
																	"    for(let i=0; i<serviceRecordList.length; i++)  {\r",
																	"        if( serviceRecordList[i][\"application-name\"] == expectedApplicationName\r",
																	"                && serviceRecordList[i][\"release-number\"] == expectedReleaseNumber\r",
																	"                && serviceRecordList[i][\"operation-name\"] == expectedOperationName\r",
																	"                && serviceRecordList[i][\"x-correlator\"] == expectedXCorrelator\r",
																	"                && serviceRecordList[i][\"user\"] == expectedUser\r",
																	"                && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
																	"                && serviceRecordList[i][\"trace-indicator\"] == expectedTraceIndicator) {\r",
																	"\r",
																	"            foundAnEntryWithTheExpectedHeaderValuesInEatl = true;\r",
																	"            responseCodeofTriggeredForwarding =  serviceRecordList[i][\"response-code\"];\r",
																	"            break;\r",
																	"        }\r",
																	"    }\r",
																	"\r",
																	"    if(foundAnEntryWithTheExpectedHeaderValuesInEatl) {\r",
																	"        pm.test(\"The request has been notified and the Parameter values have been processed with response-code 200\", function () {\r",
																	"            pm.expect(responseCodeofTriggeredForwarding).to.equal(200);        \r",
																	"        });\r",
																	"    } else {\r",
																	"        pm.test(\"The request has been notified and the Parameter values have been processed\", function () {\r",
																	"            pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEatl).to.be.true;        \r",
																	"        });\r",
																	"    }  \r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets the service consumption indicated to EaTL and the Parameters of the request processed?\n#### Requires:\n- ExecutionAndTraceLog server to operate\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - search CC for output fc-port of ServiceRequestCausesLoggingRequest, \nits corresponding op-c, http-c and tcp-c, storing them for later verification request\n- GETting EaTL/CC (while using IP and port from above)\n   - searching CC for op-c of /v1/list-records-of-flow, storing operation-key\n- POST /v1/update-flow-visualization-page\n    - auth-code from input load-file\n    - random generated x-correlator\n    - reasonable parameters\n\n#### Testing:\n- POST ExecutionAndTraceLog/v1/list-records-of-flow with \n   - IP and port from above\n   - operation-key from above\n   - DummyValue of x-correlator\n   - checking response for entry with application-name==RSR and operation-name==/v1/update-flow-visualization-page\n   - checking same record for containing DummyXCorrelator &DummyTraceIndicator\n\n#### Clearing:\n- not applicable"
										}
									]
								},
								{
									"name": "Gate",
									"item": [
										{
											"name": "for gating /v1/update-flow-visualization-page to acceptance testing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var TYPE_OF_TESTING;\r",
															"var URI;\r",
															"try {\r",
															"    TYPE_OF_TESTING = pm.environment.get(\"typeOfTesting\");\r",
															"    URI = pm.environment.get(\"dummyUri\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Loading Input Data failed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Updating Environmental Variables and Determining the next Step\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    if ( TYPE_OF_TESTING === \"Acceptance\" ) {\r",
															"        postman.setNextRequest();\r",
															"    } else {\r",
															"        postman.setNextRequest(\"for exiting /v1/update-flow-visualization-page\");\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Updating Environmental Variables and Determining the next Step failed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.variables.clear();\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = \"\";\r",
															"\r",
															"    let OPERATION_KEY;\r",
															"    OPERATION_KEY = \"\";\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"    pm.request.headers.upsert({key:\"operationKey\", value:OPERATION_KEY});\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Setting Local Variables and Preparing the Request failed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Acceptance",
									"item": [
										{
											"name": "Response body completeness",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/update-flow-visualization-page acceptance -- Response body completeness -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var executionAndTraceLogHttpClientLtp;\r",
																	"var executionAndTraceLogTcpClientLtp;\r",
																	"var httpServerLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/update-flow-visualization-page\", ltpList);\r",
																	"    httpServerLtp = FindHttpServerLtp(ltpList);\r",
																	"\r",
																	"    let recordServiceRequestOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLoggingRequest\", fcList, ltpList);\r",
																	"    executionAndTraceLogHttpClientLtp = FindServingLtp(recordServiceRequestOperationClientLtp, ltpList);\r",
																	"    executionAndTraceLogTcpClientLtp = FindServingLtp(executionAndTraceLogHttpClientLtp, ltpList); \r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"executionAndTraceLogHttpClientLtp\", executionAndTraceLogHttpClientLtp);\r",
																	"    pm.collectionVariables.set(\"executionAndTraceLogTcpClientLtp\", executionAndTraceLogTcpClientLtp);\r",
																	"    pm.collectionVariables.set(\"httpServerLtp\", httpServerLtp);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindHttpServerLtp(ltpList) {\r",
																	"    let httpServerLtp;\r",
																	"    httpServerLtp = {};\r",
																	"    try {\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"http-s-\")) {\r",
																	"                httpServerLtp = ltpList[i];\r",
																	"                return httpServerLtp;\r",
																	"            }\r",
																	"        } \r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindHttpServerLtp. \");\r",
																	"    }\r",
																	"    return httpServerLtp;\r",
																	"}\r",
																	"\r",
																	"function FindHttpClientForApplicationName(applicationName, ltpList) {\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = {};\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"http-c-\")) {\r",
																	"                let sampleApplicationName;\r",
																	"                sampleApplicationName = ltpList[i][\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-capability\"][\"application-name\"];\r",
																	"                if(sampleApplicationName == applicationName) {\r",
																	"                    httpClientLtp = ltpList[i];\r",
																	"                    return httpClientLtp;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindHttpClientForApplicationName. \");\r",
																	"    }\r",
																	"    return httpClientLtp;\r",
																	"}\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	"\r",
																	"function FindOperationServerLtp(ltpList, operationName) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName.includes(operationName)) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServerLtp. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindOperationClientLtp(serverLtp, ltpList, operationName) {\r",
																	"    let operationClientLtp;\r",
																	"    operationClientLtp = {};\r",
																	"    try {\r",
																	"        let clientLtpList;\r",
																	"        clientLtpList = serverLtp[\"client-ltp\"];\r",
																	"        let operationClientInstances;\r",
																	"        operationClientInstances = [];\r",
																	"        for ( let i=0; i<clientLtpList.length; i++ ) {\r",
																	"            for ( let j=0; j<ltpList.length; j++ ) {\r",
																	"                if( ltpList[j][\"uuid\"].includes(\"-op-c-\") ) {\r",
																	"                    if( ltpList[j][\"uuid\"] == clientLtpList[i] ) {\r",
																	"                        operationClientInstances.push(ltpList[j]);\r",
																	"                        break;\r",
																	"                    }\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"        for( let i=0; i<operationClientInstances.length; i++ ) {\r",
																	"            let sampleOperationName;\r",
																	"            sampleOperationName = operationClientInstances[i][\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
																	"            if(sampleOperationName.includes(operationName)) {\r",
																	"                operationClientLtp = operationClientInstances[i];\r",
																	"                return operationClientLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindOperationClientLtp. \")\r",
																	"    }\r",
																	"    return operationClientLtp;\r",
																	"}\r",
																	"\r",
																	"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
																	"    let operationClientLtp\r",
																	"    try {\r",
																	"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
																	"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"    } catch (error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
																	"    }\r",
																	"    return  operationClientLtp\r",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "reference ExecutionAndTraceLog/core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var AUTHORIZATION;\r",
																	"var applicationProtocol;\r",
																	"var applicationAddress;\r",
																	"var applicationPort;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let executionAndTraceLogTcpClientLtp;\r",
																	"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																	"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    if(applicationAddress.hasOwnProperty(\"ip-address\")){\r",
																	"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																	"    }else{\r",
																	"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																	"     }\r",
																	"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	" \r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = applicationProtocol + \"://\"+ applicationAddress + \":\" + applicationPort + \"/core-model-1-4:control-construct\";\r",
																	"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io\" + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var listRecordsOfFlowOperationKey;\r",
																	"var listRecordsOperationKey;\r",
																	"try {\r",
																	"    listRecordsOfFlowOperationKey = FindOperationKeyForOperationName(\"/v1/list-records-of-flow\", ltpList);\r",
																	"    listRecordsOperationKey = FindOperationKeyForOperationName(\"/v1/list-records\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"listRecordsOfFlowOperationKey\", listRecordsOfFlowOperationKey);\r",
																	"    pm.collectionVariables.set(\"listRecordsOperationKey\", listRecordsOperationKey);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function FindOperationKeyForOperationName(operationName, ltpList) {\r",
																	"    let operationKey;\r",
																	"    operationKey = \"\";\r",
																	"    try {\r",
																	"         let sampleUuid;\r",
																	"         for ( let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")){\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationKey = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"                    return operationKey; \r",
																	"                }\r",
																	"            }\r",
																	"         }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\" ! Exception in function : FindOperationKeyForOperationName\")\r",
																	"    }\r",
																	"    return operationKey;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected ExecutionAndTraceLog/v1/list-records",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationProtocol;\r",
																	"var applicationAddress;\r",
																	"var applicationPort;\r",
																	"var latestRecord;\r",
																	"var numberOfRecords;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let executionAndTraceLogTcpClientLtp;\r",
																	"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																	"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    if(applicationAddress.hasOwnProperty(\"ip-address\")){\r",
																	"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																	"    }else{\r",
																	"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																	"     }\r",
																	"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"    OPERATION_KEY = pm.collectionVariables.get(\"listRecordsOperationKey\");\r",
																	"    \r",
																	"    latestRecord = 0;\r",
																	"    numberOfRecords = 50;\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"                + '\"latest-record\": ' + latestRecord +','\r",
																	"                + '\"number-of-records\": ' + numberOfRecords \r",
																	"            + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/v1/list-records\";\r",
																	"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io/v1/list-records\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0, length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var recordsList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"\r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        recordsList = responseObject;\r",
																	"\r",
																	"    } else {\r",
																	"        recordsList = [];\r",
																	"    }\r",
																	"} catch (error) {\r",
																	"    console.log(\"! recordsList could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"var randomXCorrelator;\r",
																	"try {\r",
																	"    randomXCorrelator = GetRandomXCorrelator(recordsList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"\r",
																	"    pm.collectionVariables.set(\"randomXCorrelator\", randomXCorrelator);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function GetRandomXCorrelator(recordsList) {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    try {\r",
																	"        let xCorrelatorList;\r",
																	"        xCorrelatorList = [];\r",
																	"        for (let recordIndex=0; recordIndex < recordsList.length; recordIndex++ ) {\r",
																	"            xCorrelatorList.push(recordsList[recordIndex][\"x-correlator\"]);\r",
																	"        }\r",
																	"        xCorrelator = xCorrelatorList[Math.floor(Math.random() * xCorrelatorList.length)];\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function GetRandomXCorrelator. \");\r",
																	"    }\r",
																	"    return xCorrelator;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected ExecutionAndTraceLog/v1/list-records-of-flow",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationProtocol;\r",
																	"var applicationAddress;\r",
																	"var applicationPort;\r",
																	"var xCorrelatorUnderTest;\r",
																	"var latestMatch;\r",
																	"var numberOfRecords;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let executionAndTraceLogTcpClientLtp;\r",
																	"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																	"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    if(applicationAddress.hasOwnProperty(\"ip-address\")){\r",
																	"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																	"    }else{\r",
																	"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																	"     }\r",
																	"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"    OPERATION_KEY = pm.collectionVariables.get(\"listRecordsOfFlowOperationKey\");\r",
																	"    xCorrelatorUnderTest = pm.collectionVariables.get(\"randomXCorrelator\");\r",
																	"    latestMatch = 0;\r",
																	"    numberOfRecords = 100;\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"                + '\"x-correlator\": \"' + xCorrelatorUnderTest +'\",'\r",
																	"                + '\"latest-match\": ' + latestMatch +','\r",
																	"                + '\"number-of-records\": ' + numberOfRecords \r",
																	"            + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/v1/list-records-of-flow\";\r",
																	"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io/v1/list-records-of-flow\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0, length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var serviceRecordList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    if(Math.floor(RESPONSE_CODE/100) === 2) {\r",
																	"        serviceRecordList = JSON.parse(response.stream);\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST ExecutionAndTraceLog/v1/list-records-of-flow responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"serviceRecordList\", serviceRecordList);    \r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/update-flow-visualization-page",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var xCorrelator;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    xCorrelator = pm.collectionVariables.get(\"randomXCorrelator\");\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"x-correlator\" : ' + '\"' + xCorrelator + '\"'\r",
																	"        + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/update-flow-visualization-page\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"    \r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedServiceRecordList;\r",
																	"try {\r",
																	"    expectedServiceRecordList = pm.collectionVariables.get(\"serviceRecordList\");\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"Input data could not be loaded! \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var actualRecordList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    if ( Math.floor(RESPONSE_CODE/100) === 2 ) {\r",
																	"        actualRecordList = JSON.parse(response.stream);\r",
																	"    } else {\r",
																	"        actualRecordList = {};\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/update-flow-visualization-page responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"\r",
																	"    let schema = {\r",
																	"        \"type\" : \"array\"\r",
																	"    };\r",
																	"    let schemaValidation;\r",
																	"    schemaValidation = tv4.validateMultiple(actualRecordList, schema, true, true);\r",
																	"    console.log(schemaValidation);\r",
																	"    pm.test(\"Valid schema for  /v1/update-flow-visualization-page \", function () {\r",
																	"        pm.expect(schemaValidation.valid).to.be.true;\r",
																	"    });\r",
																	"\r",
																	"    for ( let actualRecordsListIndex=0; actualRecordsListIndex<actualRecordList.length; actualRecordsListIndex++ ) {\r",
																	"        let schema;\r",
																	"        schema = {\r",
																	"            \"type\": \"object\",\r",
																	"            \"required\": [\r",
																	"                \"x-correlator\",\r",
																	"                \"trace-indicator\",\r",
																	"                \"user\",\r",
																	"                \"originator\",\r",
																	"                \"application-name\",\r",
																	"                \"release-number\",\r",
																	"                \"operation-name\",\r",
																	"                \"response-code\"\r",
																	"            ],\r",
																	"            \"properties\": {\r",
																	"                \"x-correlator\": {\r",
																	"                    \"type\": \"string\",\r",
																	"                    \"description\": \"'UUID for the service execution flow that allows to correlate requests and responses from {$RequestForVisualizingFlowCausesRetrievingListOfRecordsIfAuthenticationSucceeds.response.body#x-correlator}'\\n\"\r",
																	"                },\r",
																	"                \"trace-indicator\": {\r",
																	"                    \"type\": \"string\",\r",
																	"                    \"description\": \"'Sequence of request numbers along the flow from {$RequestForVisualizingFlowCausesRetrievingListOfRecordsIfAuthenticationSucceeds.response.body#trace-indicator}'\\n\"\r",
																	"                },\r",
																	"                \"user\": {\r",
																	"                    \"type\": \"string\",\r",
																	"                    \"description\": \"'User identifier from the system starting the service call from {$RequestForVisualizingFlowCausesRetrievingListOfRecordsIfAuthenticationSucceeds.response.body#user}'\\n\"\r",
																	"                },\r",
																	"                \"originator\": {\r",
																	"                    \"type\": \"string\",\r",
																	"                    \"description\": \"'ApplicationName on the client side from {$RequestForVisualizingFlowCausesRetrievingListOfRecordsIfAuthenticationSucceeds.response.body#originator}'\\n\"\r",
																	"                },\r",
																	"                \"application-name\": {\r",
																	"                    \"type\": \"string\",\r",
																	"                    \"description\": \"'ApplicationName on the server side from {$RequestForVisualizingFlowCausesRetrievingListOfRecordsIfAuthenticationSucceeds.response.body#application-name}'\\n\"\r",
																	"                },\r",
																	"                \"release-number\": {\r",
																	"                    \"type\": \"string\",\r",
																	"                    \"description\": \"'ReleaseNumber on the server side from {$RequestForVisualizingFlowCausesRetrievingListOfRecordsIfAuthenticationSucceeds.response.body#release-number}'\\n\"\r",
																	"                },\r",
																	"                \"operation-name\": {\r",
																	"                    \"type\": \"string\",\r",
																	"                    \"description\": \"'Name of operation consumed on the server side from {$RequestForVisualizingFlowCausesRetrievingListOfRecordsIfAuthenticationSucceeds.response.body#operation-name}'\\n\"\r",
																	"                },\r",
																	"                \"response-code\": {\r",
																	"                    \"type\": \"integer\",\r",
																	"                    \"description\": \"'Response code from precessing the request from {$RequestForVisualizingFlowCausesRetrievingListOfRecordsIfAuthenticationSucceeds.response.body#response-code}'\\n\"\r",
																	"                }\r",
																	"            }\r",
																	"        };\r",
																	"\r",
																	"        let schemaValidation;\r",
																	"        schemaValidation = tv4.validateMultiple(actualRecordList[actualRecordsListIndex], schema, true, true);\r",
																	"        console.log(schemaValidation);\r",
																	"        pm.test(\"Valid schema for service-record x-correlator = \" + actualRecordList[actualRecordsListIndex][\"x-correlator\"], function () {\r",
																	"            pm.expect(schemaValidation.valid).to.be.true;\r",
																	"        });\r",
																	"        let actualRecordInstance;\r",
																	"        actualRecordInstance = actualRecordList[actualRecordsListIndex];\r",
																	"        let expectedRecordInstance;\r",
																	"        expectedRecordInstance = expectedServiceRecordList[actualRecordsListIndex];\r",
																	"        console.log(\"Testing\", actualRecordsListIndex , \"for x-correlator = \", expectedRecordInstance[\"x-correlator\"]);\r",
																	"        pm.test(\"Provides expected properties in service-record for '\" + actualRecordsListIndex + \"'th record\" , function () {\r",
																	"                pm.expect(actualRecordInstance[\"trace-indicator\"]).to.equal(expectedRecordInstance[\"trace-indicator\"]);\r",
																	"                pm.expect(actualRecordInstance[\"user\"]).to.equal(expectedRecordInstance[\"user\"]);\r",
																	"                pm.expect(actualRecordInstance[\"originator\"]).to.equal(expectedRecordInstance[\"originator\"]);\r",
																	"                pm.expect(actualRecordInstance[\"application-name\"]).to.equal(expectedRecordInstance[\"application-name\"]);\r",
																	"                pm.expect(actualRecordInstance[\"release-number\"]).to.equal(expectedRecordInstance[\"release-number\"]);\r",
																	"                pm.expect(actualRecordInstance[\"operation-name\"]).to.equal(expectedRecordInstance[\"operation-name\"]);\r",
																	"                pm.expect(actualRecordInstance[\"response-code\"]).to.equal(expectedRecordInstance[\"response-code\"]);\r",
																	"        });\r",
																	"    }\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "#Gets the response body checked for presence and correctness of each required attributes against load file\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct\n- searching CC for op-s of /v1/update-flow-visualization-page, storing it.\n - search CC for output fc-port of ServiceRequestCausesLoggingRequest, \nits corresponding op-c, http-c and tcp-c, storing them for later verification request\n- GET EATL/CC, find operation-key of /v1/lis-records and /v1/list-records-of-flow\n- POST /v1/list-records, \n   - find random x-correlator from list of records and store it\n- POST /v1/list-records-of-flow- for above stored x-correlator\n   - store the list of records for given x-correlator\n- POST /v1/update-flow-visualization-page with\n     - auth-code from input load-file\n     - x-correlator from above step\n      - reasonable parameters \n\n#### Testing:\n- Checking for response-code 200\n- checking the response body for each attribute against the specification\n- checking each record against above stored list of records retrieved from EATL for given x-correlator\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "life-cycle-state propogated?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/update-flow-visualization-page acceptance -- life-cycle-state propogated? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/update-flow-visualization-page\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "dummy life-cycle-state",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var operationServerUuid;\r",
																	"var dummyLifeCycleState;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"    \r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"\r",
																	"    operationServerUuid = currentOperationServer[\"uuid\"];\r",
																	"\r",
																	"    currentLifeCycleState = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"life-cycle-state\"];\r",
																	"\r",
																	"    dummyLifeCycleState = GenerateDummyLifeCycleState(currentLifeCycleState);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"dummyLifeCycleState\", dummyLifeCycleState);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl \r",
																	"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																	"            + operationServerUuid\r",
																	"            + \"/layer-protocol=0/operation-server-interface-1-0:operation-server-interface-pac/operation-server-interface-configuration/life-cycle-state\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = '{ '\r",
																	"                    +   '\"operation-server-interface-1-0:life-cycle-state\": \"' + dummyLifeCycleState + '\"'\r",
																	"                    + ' }';\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function GenerateDummyLifeCycleState(currentLifeCycleState) {\r",
																	"    let alternativeLifeCycleStateTypeList;\r",
																	"    alternativeLifeCycleStateTypeList = [  \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_EXPERIMENTAL\",\r",
																	"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_OPERATIONAL\",\r",
																	"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_DEPRECATED\", \r",
																	"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_OBSOLETE\",\r",
																	"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_UNKNOWN\",\r",
																	"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_NOT_YET_DEFINED\"\r",
																	"                                        ];\r",
																	"    let indexOfCurrentLifeCycleState;\r",
																	"    indexOfCurrentLifeCycleState = alternativeLifeCycleStateTypeList.indexOf(currentLifeCycleState);\r",
																	"    if (indexOfCurrentLifeCycleState > -1) {\r",
																	"        alternativeLifeCycleStateTypeList.splice(indexOfCurrentLifeCycleState, 1);\r",
																	"    }\r",
																	"\r",
																	"    let alternativeLifeCycleState;\r",
																	"    let alternativeLifeCycleStateTypeIndex;\r",
																	"    alternativeLifeCycleStateTypeIndex = Math.floor(Math.random() * alternativeLifeCycleStateTypeList.length);\r",
																	"    alternativeLifeCycleState = alternativeLifeCycleStateTypeList[alternativeLifeCycleStateTypeIndex]; \r",
																	"\r",
																	"    return alternativeLifeCycleState;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"PUT dummy life-cycle-state responds 204\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/update-flow-visualization-page",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var xCorrelator;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    xCorrelator = CreateXCorrelator();\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"x-correlator\" : ' + '\"' + xCorrelator + '\"'\r",
																	"        + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/update-flow-visualization-page\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedLifeCycleState;\r",
																	"try {\r",
																	"    let dummyLifeCycleState;\r",
																	"    dummyLifeCycleState = pm.collectionVariables.get(\"dummyLifeCycleState\");\r",
																	"\r",
																	"    let prefixLength = ('operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_').length;     \r",
																	"    expectedLifeCycleState = dummyLifeCycleState.substring(prefixLength);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not load Input Data. \");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var actualLifeCycleState;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    let RESPONSE_HEADERS;\r",
																	"    RESPONSE_HEADERS = pm.response.headers;  \r",
																	"\r",
																	"    actualLifeCycleState = RESPONSE_HEADERS.get(\"life-cycle-state\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"Provides dummy life-cycle-state in the header of the response: '\" + expectedLifeCycleState + \"' \", function () {\r",
																	"        pm.expect(actualLifeCycleState).to.equal(expectedLifeCycleState);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Initial life-cycle-state",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var operationServerUuid;\r",
																	"var initialLifeCycleState;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"\r",
																	"    operationServerUuid = currentOperationServer[\"uuid\"];\r",
																	"\r",
																	"    initialLifeCycleState = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"life-cycle-state\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl \r",
																	"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																	"            + operationServerUuid\r",
																	"            + \"/layer-protocol=0/operation-server-interface-1-0:operation-server-interface-pac/operation-server-interface-configuration/life-cycle-state\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY =   '{ '\r",
																	"                    +   '\"operation-server-interface-1-0:life-cycle-state\": \"' + initialLifeCycleState + '\"'\r",
																	"                    + ' }';\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"    \r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});  \r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"PUT Initial life-cycle-state responds 204 \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets lifeCycleState propagated?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n- searching CC for op-s of /v1/update-flow-visualization-page, storing operation-key\n- PUTting op-s-configuration/life-cycle-state with random alternative value\n  - POST /v1/update-flow-visualization-page\n    - auth-code from input load-file\n    - random generated x-correlator \n    - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==200\n- checking for lifeCycleState being identical with alternative op-s-configuration/life-cycle-state\n\n#### Clearing:\n- PUTting op-s-configuration/life-cycle-state back to original value"
										},
										{
											"name": "Request body completeness",
											"item": [
												{
													"name": "Expected /v1/update-flow-visualization-page Copy",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/update-flow-visualization-page acceptance -- Request body completeness -------------------------------\");/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/update-flow-visualization-page\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var actualRecordList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    if ( Math.floor(RESPONSE_CODE/100) === 2 ) {\r",
																	"        actualRecordList = JSON.parse(response.stream);\r",
																	"    } else {\r",
																	"        actualRecordList = {};\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/update-flow-visualization-page responds 400, because of missing request-body attribute\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Get attributes checked for completeness?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n- searching CC for op-s of /v1/update-flow-visualization-page, storing operation-key\n  - POST /v1/update-flow-visualization-page\n    - request-body with empty object (since service has only one request-body attribute)\n    - auth-code from input load-file\n    - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "Forwardings triggered?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/update-flow-visualization-page acceptance -- Response body completeness -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var executionAndTraceLogHttpClientLtp;\r",
																	"var executionAndTraceLogTcpClientLtp;\r",
																	"var httpServerLtp;\r",
																	"var httpClientLtp;\r",
																	"var tcpClientLtp;\r",
																	"var listRecordsOfFlowOperationClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/update-flow-visualization-page\", ltpList);\r",
																	"    httpServerLtp = FindHttpServerLtp(ltpList);\r",
																	"\r",
																	"    let recordServiceRequestOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLoggingRequest\", fcList, ltpList);\r",
																	"    executionAndTraceLogHttpClientLtp = FindServingLtp(recordServiceRequestOperationClientLtp, ltpList);\r",
																	"    executionAndTraceLogTcpClientLtp = FindServingLtp(executionAndTraceLogHttpClientLtp, ltpList); \r",
																	"\r",
																	"    //Service Request Information\r",
																	"    let outputFcPortListRequestForVisualizingFlowCausesRetrievingListOfRecordsIfAuthenticationSucceeds;\r",
																	"    outputFcPortListRequestForVisualizingFlowCausesRetrievingListOfRecordsIfAuthenticationSucceeds = FindOutputFcPortList(\"RequestForVisualizingFlowCausesRetrievingListOfRecordsIfAuthenticationSucceeds\", fcList);\r",
																	"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListRequestForVisualizingFlowCausesRetrievingListOfRecordsIfAuthenticationSucceeds, ltpList)\r",
																	"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																	"    listRecordsOfFlowOperationClientLtp = ltpInstance.operationClientLtp;\r",
																	"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"executionAndTraceLogHttpClientLtp\", executionAndTraceLogHttpClientLtp);\r",
																	"    pm.collectionVariables.set(\"executionAndTraceLogTcpClientLtp\", executionAndTraceLogTcpClientLtp);\r",
																	"    pm.collectionVariables.set(\"httpServerLtp\", httpServerLtp);\r",
																	"\r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																	"    pm.collectionVariables.set(\"listRecordsOfFlowOperationClientLtp\", listRecordsOfFlowOperationClientLtp);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindHttpServerLtp(ltpList) {\r",
																	"    let httpServerLtp;\r",
																	"    httpServerLtp = {};\r",
																	"    try {\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"http-s-\")) {\r",
																	"                httpServerLtp = ltpList[i];\r",
																	"                return httpServerLtp;\r",
																	"            }\r",
																	"        } \r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindHttpServerLtp. \");\r",
																	"    }\r",
																	"    return httpServerLtp;\r",
																	"}\r",
																	"\r",
																	"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																	"    let ltpInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																	"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"\r",
																	"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																	"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																	"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																	"                break;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																	"    } \r",
																	"    return ltpInstance;\r",
																	"}\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	"\r",
																	"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
																	"    let operationClientLtp\r",
																	"    try {\r",
																	"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
																	"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"    } catch (error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
																	"    }\r",
																	"    return  operationClientLtp\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "reference ExecutionAndTraceLog/core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var AUTHORIZATION;\r",
																	"var applicationProtocol;\r",
																	"var applicationAddress;\r",
																	"var applicationPort;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let executionAndTraceLogTcpClientLtp;\r",
																	"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																	"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    if(applicationAddress.hasOwnProperty(\"ip-address\")){\r",
																	"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																	"    }else{\r",
																	"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																	"     }\r",
																	"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	" \r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = applicationProtocol + \"://\"+ applicationAddress + \":\" + applicationPort + \"/core-model-1-4:control-construct\";\r",
																	"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io\" + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var listRecordsOfFlowOperationKey;\r",
																	"try {\r",
																	"    listRecordsOfFlowOperationKey = FindOperationKeyForOperationName(\"/v1/list-records-of-flow\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"listRecordsOfFlowOperationKey\", listRecordsOfFlowOperationKey);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function FindOperationKeyForOperationName(operationName, ltpList) {\r",
																	"    let operationKey;\r",
																	"    operationKey = \"\";\r",
																	"    try {\r",
																	"         let sampleUuid;\r",
																	"         for ( let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")){\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationKey = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"                    return operationKey; \r",
																	"                }\r",
																	"            }\r",
																	"         }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\" ! Exception in function : FindOperationKeyForOperationName\")\r",
																	"    }\r",
																	"    return operationKey;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "sampling /v1/update-flow-visualization-page",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var CURRENT_ORIGINATOR;\r",
																	"var xCorrelator;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let ltpList;\r",
																	"    ltpList = APPLICATION[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    CURRENT_ORIGINATOR = FindHttpServerApplicationName(ltpList);\r",
																	"\r",
																	"    xCorrelator = CreateXCorrelator();\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"x-correlator\" : ' + '\"' + xCorrelator + '\"'\r",
																	"        + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
																	"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
																	"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
																	"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
																	"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
																	"    pm.collectionVariables.set(\"currentOriginator\", CURRENT_ORIGINATOR);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/update-flow-visualization-page\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function FindHttpServerApplicationName(ltpList) {\r",
																	"    let applicationName;\r",
																	"    applicationName = \"\";\r",
																	"    for( let i=0; i<ltpList.length; i++ ) {\r",
																	"        let sampleUuid;\r",
																	"        sampleUuid = ltpList[i][\"uuid\"];\r",
																	"        if(sampleUuid.includes(\"http-s-\")) {\r",
																	"            applicationName = ltpList[i][\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
																	"            return applicationName;\r",
																	"        }\r",
																	"    }\r",
																	"    return applicationName;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"const currentCount = 0;\r",
																	"try {\r",
																	"\tpm.collectionVariables.set(\"currentCount\", currentCount);\r",
																	"\r",
																	"} catch(error) {\r",
																	"    console.log(\" !Could not set currentCount. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/update-flow-visualization-page responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected ExecutionAndTraceLog/v1/list-records-of-flow",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationProtocol;\r",
																	"var applicationAddress;\r",
																	"var applicationPort;\r",
																	"var xCorrelatorUnderTest;\r",
																	"var latestMatch;\r",
																	"var numberOfRecords;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let executionAndTraceLogTcpClientLtp;\r",
																	"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																	"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    if(applicationAddress.hasOwnProperty(\"ip-address\")){\r",
																	"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																	"    }else{\r",
																	"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																	"     }\r",
																	"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"    OPERATION_KEY = pm.collectionVariables.get(\"listRecordsOfFlowOperationKey\");\r",
																	"    xCorrelatorUnderTest = pm.collectionVariables.get(\"xCorrelator\");\r",
																	"    latestMatch = 0;\r",
																	"    numberOfRecords = 100;\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"                + '\"x-correlator\": \"' + xCorrelatorUnderTest +'\",'\r",
																	"                + '\"latest-match\": ' + latestMatch +','\r",
																	"                + '\"number-of-records\": ' + numberOfRecords \r",
																	"                + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"/****************************************************************************************\r",
																	"* Setting delay\r",
																	"****************************************************************************************/\r",
																	"setTimeout(function(){\r",
																	"\r",
																	"}, 3000);\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/v1/list-records-of-flow\";\r",
																	"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io/v1/list-records-of-flow\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0, length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Constant variables\r",
																	"****************************************************************************************/\r",
																	"const SERIAL_TRACE_INDICATOR = \".1\";\r",
																	"var retryMaxCount;\r",
																	"var retryWaitingPeriod;\r",
																	"var currentCount;\r",
																	"try {\r",
																	"    retryMaxCount = pm.environment.get(\"retryMaxCount\");\r",
																	"    retryWaitingPeriod = pm.environment.get(\"retryWaitingPeriod\");\r",
																	"    currentCount = pm.collectionVariables.get(\"currentCount\");\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not load constant variables Data. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedXCorrelator;\r",
																	"var expectedUser;\r",
																	"var expectedOriginator;\r",
																	"var expectedTraceIndicator;\r",
																	"var expectedApplicationName;\r",
																	"var expectedReleaseNumber;\r",
																	"var expectedOperationName;\r",
																	"try {\r",
																	"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
																	"    expectedUser = pm.collectionVariables.get(\"user\");\r",
																	"    expectedOriginator = pm.collectionVariables.get(\"currentOriginator\");\r",
																	"    expectedTraceIndicator = pm.collectionVariables.get(\"traceIndicator\");\r",
																	"\r",
																	"    //Increment traceIndicator:\r",
																	"    expectedTraceIndicator = expectedTraceIndicator + SERIAL_TRACE_INDICATOR;\r",
																	"\r",
																	"    let expectedHttpClientLtp;\r",
																	"    expectedHttpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"    expectedApplicationName = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    expectedReleaseNumber = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let expectedOperationClient;\r",
																	"    expectedOperationClient = pm.collectionVariables.get(\"listRecordsOfFlowOperationClientLtp\");\r",
																	"\r",
																	"    expectedOperationName = expectedOperationClient[\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not load Input Data. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var serviceRecordList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    if(Math.floor(RESPONSE_CODE/100) === 2) {\r",
																	"        serviceRecordList = JSON.parse(response.stream);\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST ExecutionAndTraceLog/v1/list-records-of-flow responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"\r",
																	"    let foundAnEntryWithTheExpectedHeaderValuesInEatl;\r",
																	"    foundAnEntryWithTheExpectedHeaderValuesInEatl = false;\r",
																	"    let responseCodeofTriggeredForwarding;\r",
																	"    responseCodeofTriggeredForwarding = 0;\r",
																	"    for(let i=0; i<serviceRecordList.length; i++)  {\r",
																	"        if( serviceRecordList[i][\"application-name\"] == expectedApplicationName\r",
																	"                && serviceRecordList[i][\"release-number\"] == expectedReleaseNumber\r",
																	"                && serviceRecordList[i][\"operation-name\"] == expectedOperationName\r",
																	"                && serviceRecordList[i][\"x-correlator\"] == expectedXCorrelator\r",
																	"                && serviceRecordList[i][\"user\"] == expectedUser\r",
																	"                && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
																	"                && serviceRecordList[i][\"trace-indicator\"] == expectedTraceIndicator ) {\r",
																	"\r",
																	"            foundAnEntryWithTheExpectedHeaderValuesInEatl = true;\r",
																	"            responseCodeofTriggeredForwarding =  serviceRecordList[i][\"response-code\"];\r",
																	"            break;\r",
																	"        }\r",
																	"    }\r",
																	"\r",
																	"    if (foundAnEntryWithTheExpectedHeaderValuesInEatl == false) {\r",
																	"        if( (currentCount < retryMaxCount) ) {\r",
																	"            setTimeout(()=>{\r",
																	"                postman.setNextRequest(request.name);\r",
																	"                currentCount = currentCount + 1;\r",
																	"                pm.collectionVariables.set(\"currentCount\", currentCount);\r",
																	"            }, retryWaitingPeriod);\r",
																	"        } else {\r",
																	"            pm.test(\"Forwardings is successfully notified\", function () {\r",
																	"                pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEatl).to.be.true;        \r",
																	"            });\r",
																	"        }\r",
																	"    } else {\r",
																	"        pm.test(\"Forwardings is successfully notified with response-code 200\", function () {\r",
																	"            pm.expect(responseCodeofTriggeredForwarding).to.equal(200);        \r",
																	"        });\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets the forwarding happened for the incoming request?\nRequestForVisualizingFlowCausesRetrievingListOfRecordsIfAuthenticationSucceeds\n\n#### Requires:\n- ExecutionAndTraceLog server to operate\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  -  search CC for output fc-port of ServiceRequestCausesLoggingRequest, \nits corresponding op-c, http-c and tcp-c, storing them for later verification request\n  - searching CC for output fc-port of RequestForVisualizingFlowCausesRetrievingListOfRecordsIfAuthenticationSucceeds, find corresponding op-c, http-c and tcp-c, store them.\n- GETting EaTL/CC (while using IP, protocol and port from above)\n  - searching CC for op-c of /v1/list-records-of-flow, storing operation-key\n- POST /v1/update-flow-visualization-page with  \n  - random generated x-correlator\n  - auth-code from input load-file\n  - all parameters with realistic values (incl. DummyXCorrelator)\n\n#### Testing:\n- POST ExecutionAndTraceLog/v1/list-records-of-flow with \n   - IP, protocol and port from above\n   - operation-key from above\n   - DummyValue of x-correlator\n   - checking response \n   - checking same record for containing DummyXCorrelator and applicatin-name and release-number with randomly chosen values.\n\n#### Clearing:\n- not applicable"
										}
									]
								},
								{
									"name": "Exit",
									"item": [
										{
											"name": "for exiting /v1/update-flow-visualization-page",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var URI;\r",
															"try {\r",
															"    URI = pm.environment.get(\"dummyUri\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Loading Input Data failed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Updating Environmental Variables and Determining the next Step\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.variables.clear();\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = \"\";\r",
															"\r",
															"    let OPERATION_KEY;\r",
															"    OPERATION_KEY = \"\";\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"    pm.request.headers.upsert({key:\"operationKey\", value:OPERATION_KEY});\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Setting Local Variables and Preparing the Request failed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Termination",
			"item": [
				{
					"name": "=====> JustJumpToTarget =====>",
					"item": [
						{
							"name": "=====> JustJumpToTarget =====>",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n----- JustJumpToTarget --------------------------------------------------\");",
											"/****************************************************************************************",
											"* ",
											"* This is a request for daily working with the Validator.",
											"* It just makes the program flow jumping to the Request named \"=====> Target =====>\".",
											"* ",
											"****************************************************************************************/",
											" ",
											" ",
											"/****************************************************************************************",
											"* Loading Input Data",
											"****************************************************************************************/",
											"try {",
											"    var URI;",
											"    URI = pm.environment.get(\"dummyUri\");",
											"",
											"} catch (error) {",
											"    console.log(\"! Environment variables could not be loaded.\");",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"try {",
											"    pm.variables.clear();",
											"",
											"    postman.setNextRequest(\"=====> Target =====>\");",
											"",
											"    pm.variables.set(\"uri\", URI);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"",
											"} catch (error) {",
											"    console.log(\"! Local variables could not be set.\");",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "=====> Target =====>",
					"item": [
						{
							"name": "=====> Target =====>",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n----- Target --------------------------------------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Here starts the execution of specific validation tests",
											"* ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Loading Input Data",
											"****************************************************************************************/",
											"try {",
											"    var URI;",
											"    URI = pm.environment.get(\"dummyUri\");",
											"",
											"} catch (error) {",
											"    console.log(\"! Environment variables could not be loaded.\");",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"try {",
											"    pm.variables.clear();",
											"",
											"    pm.variables.set(\"uri\", URI);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"",
											"} catch (error) {",
											"    console.log(\"! Local variables could not be set.\");",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "=====> JustJumpToTheEnd =====>",
					"item": [
						{
							"name": "=====> JustJumpToTheEnd =====>",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n----- JustJumpToEnd --------------------------------------------------\");",
											"/****************************************************************************************",
											"* ",
											"* This is a request for daily working with the Validator.",
											"* It just makes the program flow jumping to the Request named \"=====> End\".",
											"* ",
											"****************************************************************************************/",
											" ",
											" ",
											"/****************************************************************************************",
											"* Loading Input Data",
											"****************************************************************************************/",
											"try {",
											"    var URI;",
											"    URI = pm.environment.get(\"dummyUri\");",
											"",
											"} catch (error) {",
											"    console.log(\"! Environment variables could not be loaded.\");",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"try {",
											"    pm.variables.clear();",
											"",
											"    postman.setNextRequest(\"=====> End\");",
											"",
											"    pm.variables.set(\"uri\", URI);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"",
											"} catch (error) {",
											"    console.log(\"! Local variables could not be set.\");",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "=====> End",
					"item": [
						{
							"name": "=====> End",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n----- End --------------------------------------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Here ends the validation",
											"*",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Loading Input Data",
											"****************************************************************************************/",
											"try {",
											"    var URI;",
											"    URI = pm.environment.get(\"dummyUri\");",
											"",
											"} catch (error) {",
											"    console.log(\"! Environment variables could not be loaded.\");",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"try {",
											"    pm.variables.clear();",
											"",
											"    pm.variables.set(\"uri\", URI);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"",
											"} catch (error) {",
											"    console.log(\"! Local variables could not be set.\");",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "PostTermination",
			"item": [
				{
					"name": "Deep check of CC for being at initial stage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"\\n----- GET /core-model-1-4:control-construct - cross verifying with the initial data to make sure initial configurations are maintained after test-suite run -------------------------------\");\r",
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"var APPLICATION;\r",
									"var AUTHORIZATION;\r",
									"try {\r",
									"    APPLICATION = pm.environment.get(\"application\");\r",
									"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
									"\r",
									"    oamPath = \"/core-model-1-4:control-construct\";\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Environment variables could not be loaded.\");\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									"* Defining Request Body\r",
									"****************************************************************************************/\r",
									"var REQUEST_BODY;\r",
									"try {\r",
									"    REQUEST_BODY = \"\";\r",
									"} catch (error) {\r",
									"    console.log(\"!Could not define request body. \");\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    let URI;\r",
									"    URI = APPLICATION.serverUrl + oamPath;\r",
									"\r",
									"    let ACCEPT;\r",
									"    ACCEPT = \"application/json\";\r",
									"\r",
									"    let CONTENT_TYPE;\r",
									"    CONTENT_TYPE = \"application/json\";\r",
									"\r",
									"    pm.variables.clear();\r",
									"\r",
									"    pm.variables.set(\"uri\", URI);\r",
									"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
									"\r",
									"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
									"\r",
									"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
									"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Local variables could not be set.\");\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"var expectedControlConstruct;\r",
									"let expectedProfileList;\r",
									"var expectedLtpList;\r",
									"var expectedFDList;\r",
									"try {\r",
									"    let APPLICATION;\r",
									"    APPLICATION = pm.environment.get(\"application\");\r",
									"    expectedControlConstruct = APPLICATION[\"core-model-1-4:control-construct\"];\r",
									"    expectedProfileList = expectedControlConstruct[\"profile-collection\"][\"profile\"];\r",
									"    expectedLtpList = expectedControlConstruct[\"logical-termination-point\"];\r",
									"    expectedFDList = expectedControlConstruct[\"forwarding-domain\"];\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Could not load Input Data. \");\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Extracting Result\r",
									"****************************************************************************************/\r",
									"var RESPONSE_CODE;\r",
									"var actualControlConstruct;\r",
									"try {\r",
									"    let response;\r",
									"    response = pm.response;\r",
									"\r",
									"    RESPONSE_CODE = parseInt(response.code);\r",
									"\r",
									"    if ( Math.floor(RESPONSE_CODE/100) === 2 ) {\r",
									"        actualControlConstruct = JSON.parse(response.stream);\r",
									"    } else {\r",
									"        actualControlConstruct = {};\r",
									"    }\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Response Code could not be extracted.\");\r",
									"}    \r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Testing\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.test(\"POST /core-model-1-4:control-construct responds 200\", function () {\r",
									"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
									"    });\r",
									"    pm.test(\"Control construct could be found \" , function () {\r",
									"        pm.expect(actualControlConstruct).to.not.equal(undefined);\r",
									"        pm.expect(Object.keys(actualControlConstruct).length).to.not.equal(0);\r",
									"    });\r",
									"\r",
									"    if( actualControlConstruct != undefined ) { \r",
									"                \r",
									"        pm.test(\"control-construct uuid '\" + expectedControlConstruct[\"uuid\"] + \"' could be found \" , function () {\r",
									"            pm.expect(actualControlConstruct[\"core-model-1-4:control-construct\"][\"uuid\"]).to.not.equal(undefined);\r",
									"            pm.expect(actualControlConstruct[\"core-model-1-4:control-construct\"][\"uuid\"]).to.equal(expectedControlConstruct[\"uuid\"]);\r",
									"        });\r",
									"\r",
									"        //testing profile collection\r",
									"\r",
									"        var actualProfileList;\r",
									"        actualProfileList = actualControlConstruct[\"core-model-1-4:control-construct\"][\"profile-collection\"][\"profile\"];\r",
									"        pm.test(\"profile list could be found \" , function () {\r",
									"            pm.expect(actualProfileList).to.not.equal(undefined);\r",
									"            pm.expect(Object.keys(actualProfileList).length).to.not.equal(0);\r",
									"        });\r",
									"        if(actualProfileList!=undefined) {\r",
									"            for ( let expectedProfileIndex=0; expectedProfileIndex<expectedProfileList.length; expectedProfileIndex++ ) {\r",
									"                let expectedProfileInstance;\r",
									"                expectedProfileInstance = expectedProfileList[expectedProfileIndex];\r",
									"                let actualProfileInstance = FindActualInstance(expectedProfileInstance[\"uuid\"], actualProfileList);\r",
									"                pm.test(\"Profile instance '\" + expectedProfileInstance[\"uuid\"] + \"' could be found \" , function () {\r",
									"                    pm.expect(actualProfileInstance).to.not.equal(undefined);\r",
									"                    pm.expect(Object.keys(actualProfileInstance).length).to.not.equal(0);\r",
									"                });\r",
									"                if(actualProfileInstance != undefined) {\r",
									"                    console.log(\"testing \" + expectedProfileInstance[\"uuid\"]);\r",
									"                    pm.test(\"Provides expected profile-name '\" + expectedProfileInstance[\"profile-name\"] + \"' for \" + expectedProfileInstance[\"uuid\"] + \"'\", function () {\r",
									"                            pm.expect(actualProfileInstance[\"profile-name\"]).to.equal(expectedProfileInstance[\"profile-name\"]);\r",
									"                    });\r",
									"                    if(expectedProfileInstance[\"profile-name\"].includes(\"PROFILE_NAME_TYPE_ACTION_PROFILE\")) {\r",
									"                        let expectedActionProfileCapability;\r",
									"                        expectedActionProfileCapability = expectedProfileInstance[\"action-profile-1-0:action-profile-pac\"][\"action-profile-capability\"];\r",
									"                        let actualActionProfileCapability;\r",
									"                        actualActionProfileCapability = actualProfileInstance[\"action-profile-1-0:action-profile-pac\"][\"action-profile-capability\"];\r",
									"                        pm.test(\"action-profile-capability class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualActionProfileCapability).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualActionProfileCapability).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualActionProfileCapability != undefined) {\r",
									"                            pm.test(\"Provides expected properties in capability class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualActionProfileCapability[\"operation-name\"]).to.equal(expectedActionProfileCapability[\"operation-name\"]);\r",
									"                                pm.expect(actualActionProfileCapability[\"label\"]).to.equal(expectedActionProfileCapability[\"label\"]);\r",
									"                                pm.expect(actualActionProfileCapability[\"display-in-new-browser-window\"]).to.equal(expectedActionProfileCapability[\"display-in-new-browser-window\"]);\r",
									"                            });\r",
									"                        }\r",
									"                        let expectedActionProfileConfiguration;\r",
									"                        expectedActionProfileConfiguration = expectedProfileInstance[\"action-profile-1-0:action-profile-pac\"][\"action-profile-configuration\"];\r",
									"                        let actualActionProfileConfiguration;\r",
									"                        actualActionProfileConfiguration = actualProfileInstance[\"action-profile-1-0:action-profile-pac\"][\"action-profile-configuration\"];\r",
									"                        pm.test(\"action-profile-configuration class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualActionProfileConfiguration).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualActionProfileConfiguration).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualActionProfileConfiguration != undefined) {\r",
									"                            pm.test(\"Provides expected properties in configuration class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualActionProfileConfiguration[\"consequent-operation-reference\"]).to.equal(expectedActionProfileConfiguration[\"consequent-operation-reference\"]);\r",
									"                            });\r",
									"                        }\r",
									"                    } else if (expectedProfileInstance[\"profile-name\"].includes(\"PROFILE_NAME_TYPE_GENERIC_RESPONSE_PROFILE\")) {\r",
									"                        let expectedResponseProfileCapability;\r",
									"                        expectedResponseProfileCapability = expectedProfileInstance[\"response-profile-1-0:response-profile-pac\"][\"response-profile-capability\"];\r",
									"                        let actualResponseProfileCapability;\r",
									"                        actualResponseProfileCapability = actualProfileInstance[\"response-profile-1-0:response-profile-pac\"][\"response-profile-capability\"];\r",
									"                        pm.test(\"response-profile-capability class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualResponseProfileCapability).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualResponseProfileCapability).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualResponseProfileCapability != undefined) {\r",
									"                            pm.test(\"Provides expected properties in capability class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualResponseProfileCapability[\"operation-name\"]).to.equal(expectedResponseProfileCapability[\"operation-name\"]);\r",
									"                                pm.expect(JSON.stringify(actualResponseProfileCapability[\"field-name\"])).to.equal(JSON.stringify(expectedResponseProfileCapability[\"field-name\"]));\r",
									"                                pm.expect(actualResponseProfileCapability[\"datatype\"]).to.equal(expectedResponseProfileCapability[\"datatype\"]);\r",
									"                            });\r",
									"                        }\r",
									"                        let expectedResponseProfileConfiguration;\r",
									"                        expectedResponseProfileConfiguration = expectedProfileInstance[\"response-profile-1-0:response-profile-pac\"][\"response-profile-configuration\"];\r",
									"                        let actualResponseProfileConfiguration;\r",
									"                        actualResponseProfileConfiguration = actualProfileInstance[\"response-profile-1-0:response-profile-pac\"][\"response-profile-configuration\"];\r",
									"                        pm.test(\"response-profile-configuration class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualResponseProfileConfiguration).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualResponseProfileConfiguration).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualResponseProfileConfiguration != undefined) {\r",
									"                            pm.test(\"Provides expected properties in configuration class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(JSON.stringify(actualResponseProfileConfiguration[\"value\"])).to.equal(JSON.stringify(expectedResponseProfileConfiguration[\"value\"]));\r",
									"                            });\r",
									"                        }\r",
									"                    } else if (expectedProfileInstance[\"profile-name\"].includes(\"PROFILE_NAME_TYPE_FILE_PROFILE\")) {\r",
									"                        let expectedFileProfileCapability;\r",
									"                        expectedFileProfileCapability = expectedProfileInstance[\"file-profile-1-0:file-profile-pac\"][\"file-profile-capability\"];\r",
									"                        let actualFileProfileCapability;\r",
									"                        actualFileProfileCapability = actualProfileInstance[\"file-profile-1-0:file-profile-pac\"][\"file-profile-capability\"];\r",
									"                        pm.test(\"file-profile-capability class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualFileProfileCapability).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualFileProfileCapability).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualFileProfileCapability != undefined) {\r",
									"                            pm.test(\"Provides expected properties in capability class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualFileProfileCapability[\"file-identifier\"]).to.equal(expectedFileProfileCapability[\"file-identifier\"]);\r",
									"                                pm.expect(actualFileProfileCapability[\"file-description\"]).to.equal(expectedFileProfileCapability[\"file-description\"]);\r",
									"                            });\r",
									"                        }\r",
									"                        let expectedFileProfileConfiguration;\r",
									"                        expectedFileProfileConfiguration = expectedProfileInstance[\"file-profile-1-0:file-profile-pac\"][\"file-profile-configuration\"];\r",
									"                        let actualFileProfileConfiguration;\r",
									"                        actualFileProfileConfiguration = actualProfileInstance[\"file-profile-1-0:file-profile-pac\"][\"file-profile-configuration\"];\r",
									"                        pm.test(\"file-profile-configuration class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualFileProfileConfiguration).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualFileProfileConfiguration).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualFileProfileConfiguration != undefined) {\r",
									"                            pm.test(\"Provides expected properties in configuration class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualFileProfileConfiguration[\"value\"]).to.equal(expectedFileProfileConfiguration[\"value\"]);\r",
									"                            });\r",
									"                            if(expectedFileProfileConfiguration.hasOwnProperty(\"user-name\")) {\r",
									"                                pm.expect(actualFileProfileConfiguration[\"user-name\"]).to.equal(expectedFileProfileConfiguration[\"user-name\"]);\r",
									"                            }\r",
									"                            if(expectedFileProfileConfiguration.hasOwnProperty(\"password\")) {\r",
									"                                pm.expect(actualFileProfileConfiguration[\"password\"]).to.equal(expectedFileProfileConfiguration[\"password\"]);\r",
									"                            }\r",
									"                            if(expectedFileProfileConfiguration.hasOwnProperty(\"operation\")) {\r",
									"                                pm.expect(actualFileProfileConfiguration[\"operation\"]).to.equal(expectedFileProfileConfiguration[\"operation\"]);\r",
									"                            }\r",
									"                        }\r",
									"                    } else if (expectedProfileInstance[\"profile-name\"].includes(\"PROFILE_NAME_TYPE_INTEGER_PROFILE\")) {\r",
									"                        let expectedIntegerProfileCapability;\r",
									"                        expectedIntegerProfileCapability = expectedProfileInstance[\"integer-profile-1-0:integer-profile-pac\"][\"integer-profile-capability\"];\r",
									"                        let actualIntegerProfileCapability;\r",
									"                        actualIntegerProfileCapability = actualProfileInstance[\"integer-profile-1-0:integer-profile-pac\"][\"integer-profile-capability\"];\r",
									"                        pm.test(\"integer-profile-capability class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualIntegerProfileCapability).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualIntegerProfileCapability).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualIntegerProfileCapability != undefined) {\r",
									"                            pm.test(\"Provides expected properties in capability class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualIntegerProfileCapability[\"integer-name\"]).to.equal(expectedIntegerProfileCapability[\"integer-name\"]);\r",
									"                                if(expectedIntegerProfileCapability.hasOwnProperty(\"unit\")) {\r",
									"                                    pm.expect(actualIntegerProfileCapability[\"unit\"]).to.equal(expectedIntegerProfileCapability[\"unit\"]);\r",
									"                                }\r",
									"                                if(expectedIntegerProfileCapability.hasOwnProperty(\"minimum\")) {\r",
									"                                    pm.expect(actualIntegerProfileCapability[\"minimum\"]).to.equal(expectedIntegerProfileCapability[\"minimum\"]);\r",
									"                                }\r",
									"                                if(expectedIntegerProfileCapability.hasOwnProperty(\"maximum\")) {\r",
									"                                    pm.expect(actualIntegerProfileCapability[\"maximum\"]).to.equal(expectedIntegerProfileCapability[\"maximum\"]);\r",
									"                                }\r",
									"                            });\r",
									"                        }\r",
									"                        let expectedIntegerProfileConfiguration;\r",
									"                        expectedIntegerProfileConfiguration = expectedProfileInstance[\"integer-profile-1-0:integer-profile-pac\"][\"integer-profile-configuration\"];\r",
									"                        let actualIntegerProfileConfiguration;\r",
									"                        actualIntegerProfileConfiguration = actualProfileInstance[\"integer-profile-1-0:integer-profile-pac\"][\"integer-profile-configuration\"];\r",
									"                        pm.test(\"integer-profile-configuration class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualIntegerProfileConfiguration).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualIntegerProfileConfiguration).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualIntegerProfileConfiguration != undefined) {\r",
									"                            pm.test(\"Provides expected properties in configuration class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualIntegerProfileConfiguration[\"integer-value\"]).to.equal(expectedIntegerProfileConfiguration[\"integer-value\"]);\r",
									"                            });\r",
									"                        }\r",
									"                    } else if (expectedProfileInstance[\"profile-name\"].includes(\"PROFILE_NAME_TYPE_STRING_PROFILE\")) {\r",
									"                        let expectedStringProfileCapability;\r",
									"                        expectedStringProfileCapability = expectedProfileInstance[\"string-profile-1-0:string-profile-pac\"][\"string-profile-capability\"];\r",
									"                        let actualStringProfileCapability;\r",
									"                        actualStringProfileCapability = actualProfileInstance[\"string-profile-1-0:string-profile-pac\"][\"string-profile-capability\"];\r",
									"                        pm.test(\"string-profile-capability class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualStringProfileCapability).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualStringProfileCapability).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualStringProfileCapability != undefined) {\r",
									"                            pm.test(\"Provides expected properties in capability class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualStringProfileCapability[\"string-name\"]).to.equal(expectedStringProfileCapability[\"string-name\"]);\r",
									"                                if(expectedStringProfileCapability.hasOwnProperty(\"enumeration\")) {\r",
									"                                    pm.expect(JSON.stringify(actualStringProfileCapability[\"enumeration\"])).to.equal(JSON.stringify(expectedStringProfileCapability[\"enumeration\"]));\r",
									"                                }\r",
									"                                if(expectedStringProfileCapability.hasOwnProperty(\"pattern\")) {\r",
									"                                    pm.expect(actualStringProfileCapability[\"pattern\"]).to.equal(expectedStringProfileCapability[\"pattern\"]);\r",
									"                                }\r",
									"                            });\r",
									"                        }\r",
									"                        let expectedStringProfileConfiguration;\r",
									"                        expectedStringProfileConfiguration = expectedProfileInstance[\"string-profile-1-0:string-profile-pac\"][\"string-profile-configuration\"];\r",
									"                        let actualStringProfileConfiguration;\r",
									"                        actualStringProfileConfiguration = actualProfileInstance[\"string-profile-1-0:string-profile-pac\"][\"string-profile-configuration\"];\r",
									"                        pm.test(\"string-profile-configuration class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualStringProfileConfiguration).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualStringProfileConfiguration).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualStringProfileConfiguration != undefined) {\r",
									"                            pm.test(\"Provides expected properties in configuration class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualStringProfileConfiguration[\"string-value\"]).to.equal(expectedStringProfileConfiguration[\"string-value\"]);\r",
									"                            });\r",
									"                        }\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"\r",
									"        // testcases for logical termination point\r",
									"\r",
									"        var actualLtpList;\r",
									"        actualLtpList = actualControlConstruct[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
									"        pm.test(\"Logical termination point list could be found \" , function () {\r",
									"            pm.expect(actualLtpList).to.not.equal(undefined);\r",
									"            pm.expect(Object.keys(actualLtpList).length).to.not.equal(0);\r",
									"        });\r",
									"        if(actualLtpList != undefined) {\r",
									"            for ( let expectedLtpIndex=0; expectedLtpIndex<expectedLtpList.length; expectedLtpIndex++ ) {\r",
									"                let expectedLtpInstance;\r",
									"                expectedLtpInstance = expectedLtpList[expectedLtpIndex];\r",
									"                let actualLtpInstance = FindActualInstance(expectedLtpInstance[\"uuid\"], actualLtpList);\r",
									"                pm.test(\"LTP instance '\" + expectedLtpInstance[\"uuid\"] + \"' could be found \" , function () {\r",
									"                    pm.expect(actualLtpInstance).to.not.equal(undefined);\r",
									"                    pm.expect(Object.keys(actualLtpInstance).length).to.not.equal(0);\r",
									"                });\r",
									"                if( actualLtpInstance != undefined ) {\r",
									"                    console.log(\"testing \"+ actualLtpInstance[\"uuid\"]);\r",
									"                    pm.test(\"Provides expected ltp-direction '\" + expectedLtpInstance[\"ltp-direction\"] + \"' for '\" + expectedLtpInstance[\"uuid\"] + \"'\", function () {\r",
									"                        pm.expect(actualLtpInstance[\"ltp-direction\"]).to.equal(expectedLtpInstance[\"ltp-direction\"]);\r",
									"                    });\r",
									"                    if(expectedLtpInstance[\"client-ltp\"].length != actualLtpInstance[\"client-ltp\"].length) {\r",
									"                        pm.test(\"Provides expected length of client-ltp list for '\" + expectedLtpInstance[\"uuid\"] + \"'\", function () {\r",
									"                            pm.expect(actualLtpInstance[\"client-ltp\"].length).to.equal(expectedLtpInstance[\"client-ltp\"].length);\r",
									"                        });\r",
									"                    } else {\r",
									"                        if(expectedLtpInstance[\"client-ltp\"].length != 0) {\r",
									"                            let isClientLtpListEqual;\r",
									"                            isClientLtpListEqual = areEqual(actualLtpInstance[\"client-ltp\"], expectedLtpInstance[\"client-ltp\"]); \r",
									"                            pm.test(\"Provides expected client-ltp list for '\" + expectedLtpInstance[\"uuid\"] + \"'\", function () {\r",
									"                                pm.expect(isClientLtpListEqual).to.be.true;\r",
									"                            });\r",
									"                        }\r",
									"                    }\r",
									"                    if(expectedLtpInstance[\"server-ltp\"].length != actualLtpInstance[\"server-ltp\"].length) {\r",
									"                        pm.test(\"Provides expected length of server-ltp list for '\" + expectedLtpInstance[\"uuid\"] + \"'\", function () {\r",
									"                            pm.expect(actualLtpInstance[\"server-ltp\"].length).to.equal(expectedLtpInstance[\"server-ltp\"].length);\r",
									"                        });\r",
									"                    } else {\r",
									"                        if(expectedLtpInstance[\"server-ltp\"].length != 0) {\r",
									"                            let isServerLtpListEqual;\r",
									"                            isServerLtpListEqual = areEqual(actualLtpInstance[\"server-ltp\"], expectedLtpInstance[\"server-ltp\"]); \r",
									"                            pm.test(\"Provides expected server-ltp list for '\" + expectedLtpInstance[\"uuid\"] + \"'\", function () {\r",
									"                                pm.expect(isServerLtpListEqual).to.be.true;\r",
									"                            });\r",
									"                        }\r",
									"                    }\r",
									"                    let expectedLayerProtocol;\r",
									"                    expectedLayerProtocol = expectedLtpInstance[\"layer-protocol\"][0];\r",
									"                    let actualLayerProtocol;\r",
									"                    actualLayerProtocol = actualLtpInstance[\"layer-protocol\"][0];\r",
									"                    pm.test(\"layer-protocol could be found in ltp instance '\" + expectedLtpInstance[\"uuid\"] + \"'\", function () {\r",
									"                        pm.expect(actualLayerProtocol).to.not.equal(undefined);\r",
									"                        pm.expect(Object.keys(actualLayerProtocol).length).to.not.equal(0);\r",
									"                    });\r",
									"                    if( actualLayerProtocol != undefined ) {\r",
									"                         pm.test(\"Provides expected local-id '\" + expectedLayerProtocol[\"local-id\"] + \"' for instance '\" + expectedLtpInstance[\"uuid\"] + \"'\", function () {\r",
									"                            pm.expect(actualLayerProtocol[\"local-id\"]).to.equal(expectedLayerProtocol[\"local-id\"]);\r",
									"                        });\r",
									"                        pm.test(\"Provides expected layer-protocol-name '\" + expectedLayerProtocol[\"layer-protocol-name\"] + \"' for '\" + expectedLtpInstance[\"uuid\"] + \"'\", function () {\r",
									"                            pm.expect(actualLayerProtocol[\"layer-protocol-name\"]).to.equal(expectedLayerProtocol[\"layer-protocol-name\"]);\r",
									"                        });\r",
									"                        if ( expectedLayerProtocol[\"layer-protocol-name\"].includes(\"operation-server-interface-1-0:LAYER_PROTOCOL_NAME_TYPE_OPERATION_LAYER\")) {\r",
									"                            let expectedOperationServerCapability;\r",
									"                            expectedOperationServerCapability = expectedLayerProtocol[\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"];\r",
									"                            let actualOperationServerCapability;\r",
									"                            actualOperationServerCapability = actualLayerProtocol[\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"];\r",
									"                            pm.test(\"operation-server-capability class could be foundfor '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualOperationServerCapability).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualOperationServerCapability).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualOperationServerCapability != undefined) {\r",
									"                                pm.test(\"Provides expected properties in capability class for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualOperationServerCapability[\"operation-name\"]).to.equal(expectedOperationServerCapability[\"operation-name\"]);\r",
									"                                });\r",
									"                            }\r",
									"                            let expectedOperationServerConfiguration;\r",
									"                            expectedOperationServerConfiguration = expectedLayerProtocol[\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"];\r",
									"                            let actualOperationServerConfiguration;\r",
									"                            actualOperationServerConfiguration = actualLayerProtocol[\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"];\r",
									"                            pm.test(\"operation-server-configuration class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualOperationServerConfiguration).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualOperationServerConfiguration).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualOperationServerConfiguration != undefined) {\r",
									"                                pm.test(\"Provides expected properties in configuration class for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualOperationServerConfiguration[\"life-cycle-state\"]).to.equal(expectedOperationServerConfiguration[\"life-cycle-state\"]);\r",
									"                                    pm.expect(actualOperationServerConfiguration[\"operation-key\"]).to.equal(expectedOperationServerConfiguration[\"operation-key\"]);\r",
									"                                });\r",
									"                            }\r",
									"                        } else if( expectedLayerProtocol[\"layer-protocol-name\"].includes(\"http-server-interface-1-0:LAYER_PROTOCOL_NAME_TYPE_HTTP_LAYER\") ) {\r",
									"                            let expectedHttpServerCapability;\r",
									"                            expectedHttpServerCapability = expectedLayerProtocol[\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"];\r",
									"                            let actualHttpServerCapability;\r",
									"                            actualHttpServerCapability = actualLayerProtocol[\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"];\r",
									"                            pm.test(\"http-server-capability class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualHttpServerCapability).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualHttpServerCapability).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualHttpServerCapability != undefined) {\r",
									"                                pm.test(\"Provides expected properties in capability class for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualHttpServerCapability[\"application-name\"]).to.equal(expectedHttpServerCapability[\"application-name\"]);\r",
									"                                    pm.expect(actualHttpServerCapability[\"release-number\"]).to.equal(expectedHttpServerCapability[\"release-number\"]);\r",
									"                                    pm.expect(actualHttpServerCapability[\"application-purpose\"]).to.equal(expectedHttpServerCapability[\"application-purpose\"]);\r",
									"                                    pm.expect(actualHttpServerCapability[\"data-update-period\"]).to.equal(expectedHttpServerCapability[\"data-update-period\"]);\r",
									"                                    pm.expect(actualHttpServerCapability[\"owner-name\"]).to.equal(expectedHttpServerCapability[\"owner-name\"]);\r",
									"                                    pm.expect(actualHttpServerCapability[\"owner-email-address\"]).to.equal(expectedHttpServerCapability[\"owner-email-address\"]);\r",
									"                                    pm.expect(JSON.stringify(actualHttpServerCapability[\"release-list\"])).to.equal(JSON.stringify(expectedHttpServerCapability[\"release-list\"]));\r",
									"                                });\r",
									"                            }\r",
									"                        } else if (expectedLayerProtocol[\"layer-protocol-name\"].includes(\"tcp-server-interface-1-0:LAYER_PROTOCOL_NAME_TYPE_TCP_LAYER\") ) {\r",
									"                            let expectedTcpServerConfiguration;\r",
									"                            expectedTcpServerConfiguration = expectedLayerProtocol[\"tcp-server-interface-1-0:tcp-server-interface-pac\"][\"tcp-server-interface-configuration\"];\r",
									"                            let actualTcpServerConfiguration;\r",
									"                            actualTcpServerConfiguration = actualLayerProtocol[\"tcp-server-interface-1-0:tcp-server-interface-pac\"][\"tcp-server-interface-configuration\"];\r",
									"                            pm.test(\"tcp-server-configuration class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualTcpServerConfiguration).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualTcpServerConfiguration).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualTcpServerConfiguration != undefined) {\r",
									"                                pm.test(\"Provides expected properties in configuration class for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualTcpServerConfiguration[\"description\"]).to.equal(expectedTcpServerConfiguration[\"description\"]);\r",
									"                                    pm.expect(actualTcpServerConfiguration[\"local-protocol\"]).to.equal(expectedTcpServerConfiguration[\"local-protocol\"]);\r",
									"                                    let addressAttributePresent;\r",
									"                                    addressAttributePresent = expectedTcpServerConfiguration[\"local-address\"].hasOwnProperty(\"ipv-4-address\") || expectedTcpServerConfiguration[\"local-address\"].hasOwnProperty(\"domain-name\");\r",
									"                                    if(addressAttributePresent) {\r",
									"                                        if(expectedTcpServerConfiguration[\"local-address\"].hasOwnProperty(\"ipv-4-address\")) {\r",
									"                                            pm.expect(actualTcpServerConfiguration[\"local-address\"][\"ipv-4-address\"]).to.equal(expectedTcpServerConfiguration[\"local-address\"][\"ipv-4-address\"]);\r",
									"                                        } else if(expectedTcpServerConfiguration[\"local-address\"].hasOwnProperty(\"domain-name\")){\r",
									"                                            pm.expect(actualTcpServerConfiguration[\"local-address\"][\"domain-name\"]).to.equal(expectedTcpServerConfiguration[\"local-address\"][\"domain-name\"]);\r",
									"                                        }\r",
									"                                    } else {\r",
									"                                        pm.expect(addressAttributePresent).to.be.true;\r",
									"                                    }\r",
									"                                    pm.expect(actualTcpServerConfiguration[\"local-port\"]).to.equal(expectedTcpServerConfiguration[\"local-port\"]);\r",
									"                                });\r",
									"                            }\r",
									"                        } else if ( expectedLayerProtocol[\"layer-protocol-name\"].includes(\"operation-client-interface-1-0:LAYER_PROTOCOL_NAME_TYPE_OPERATION_LAYER\") ) {\r",
									"                            let expectedOperationClientConfiguration;\r",
									"                            expectedOperationClientConfiguration = expectedLayerProtocol[\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"];\r",
									"                            let actualOperationClientConfiguration;\r",
									"                            actualOperationClientConfiguration = actualLayerProtocol[\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"];\r",
									"                            pm.test(\"operation-client-configuration class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualOperationClientConfiguration).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualOperationClientConfiguration).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualOperationClientConfiguration != undefined) {\r",
									"                                pm.test(\"Provides expected properties in configuration class for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualOperationClientConfiguration[\"operation-name\"]).to.equal(expectedOperationClientConfiguration[\"operation-name\"]);\r",
									"                                    pm.expect(actualOperationClientConfiguration[\"operation-key\"]).to.equal(expectedOperationClientConfiguration[\"operation-key\"]);\r",
									"                                    if(expectedOperationClientConfiguration.hasOwnProperty(\"detailed-logging-is-on\")) {\r",
									"                                        pm.expect(actualOperationClientConfiguration[\"detailed-logging-is-on\"]).to.equal(expectedOperationClientConfiguration[\"detailed-logging-is-on\"]);\r",
									"                                    }\r",
									"                                });\r",
									"                            }\r",
									"                            let expectedOperationClientStatus;\r",
									"                            expectedOperationClientStatus = expectedLayerProtocol[\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-status\"];\r",
									"                            let actualOperationClientStatus;\r",
									"                            actualOperationClientStatus = actualLayerProtocol[\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-status\"];\r",
									"                            pm.test(\"operation-client-status class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualOperationClientStatus).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualOperationClientStatus).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualOperationClientStatus != undefined) {\r",
									"                                pm.test(\"Provides expected properties in status class  for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualOperationClientStatus[\"operational-state\"]).to.equal(expectedOperationClientStatus[\"operational-state\"]);\r",
									"                                    pm.expect(actualOperationClientStatus[\"life-cycle-state\"]).to.equal(expectedOperationClientStatus[\"life-cycle-state\"]);\r",
									"                                });\r",
									"                            }\r",
									"                        } else if ( expectedLayerProtocol[\"layer-protocol-name\"].includes(\"elasticsearch-client-interface-1-0:LAYER_PROTOCOL_NAME_TYPE_ELASTICSEARCH_LAYER\") ) {\r",
									"                            let expectedElasticSearchClientConfiguration;\r",
									"                            expectedElasticSearchClientConfiguration = expectedLayerProtocol[\"elasticsearch-client-interface-1-0:elasticsearch-client-interface-pac\"][\"elasticsearch-client-interface-configuration\"];\r",
									"                            let actualElasticSearchClientConfiguration;\r",
									"                            actualElasticSearchClientConfiguration = actualLayerProtocol[\"elasticsearch-client-interface-1-0:elasticsearch-client-interface-pac\"][\"elasticsearch-client-interface-configuration\"];\r",
									"                            pm.test(\"elasticsearch-client-configuration class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualElasticSearchClientConfiguration).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualElasticSearchClientConfiguration).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualElasticSearchClientConfiguration != undefined) {\r",
									"                                pm.test(\"Provides expected properties in configuration class for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualElasticSearchClientConfiguration[\"auth\"][\"api-key\"]).to.equal(expectedElasticSearchClientConfiguration[\"auth\"][\"api-key\"]);\r",
									"                                    pm.expect(actualElasticSearchClientConfiguration[\"index-alias\"]).to.equal(expectedElasticSearchClientConfiguration[\"index-alias\"]);\r",
									"                                    if(expectedElasticSearchClientConfiguration.hasOwnProperty(\"service-records-policy\")) {\r",
									"                                        pm.expect(JSON.stringify(actualElasticSearchClientConfiguration[\"service-records-policy\"])).to.equal(JSON.stringify(expectedElasticSearchClientConfiguration[\"service-records-policy\"]));\r",
									"                                    }\r",
									"                                });\r",
									"                            }\r",
									"                            let expectedElasticSearchClientStatus;\r",
									"                            expectedElasticSearchClientStatus = expectedLayerProtocol[\"elasticsearch-client-interface-1-0:elasticsearch-client-interface-pac\"][\"elasticsearch-client-interface-configuration\"];\r",
									"                            let actualElasticSearchClientStatus;\r",
									"                            actualElasticSearchClientStatus = actualLayerProtocol[\"elasticsearch-client-interface-1-0:elasticsearch-client-interface-pac\"][\"elasticsearch-client-interface-configuration\"];\r",
									"                            pm.test(\"elasticsearch-client-status class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualElasticSearchClientStatus).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualElasticSearchClientStatus).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualElasticSearchClientStatus != undefined) {\r",
									"                                pm.test(\"Provides expected properties in status class  for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualElasticSearchClientStatus[\"operational-state\"]).to.equal(expectedElasticSearchClientStatus[\"operational-state\"]);\r",
									"                                    pm.expect(actualElasticSearchClientStatus[\"life-cycle-state\"]).to.equal(expectedElasticSearchClientStatus[\"life-cycle-state\"]);\r",
									"                                });\r",
									"                            }\r",
									"                        } else if ( expectedLayerProtocol[\"layer-protocol-name\"].includes(\"http-client-interface-1-0:LAYER_PROTOCOL_NAME_TYPE_HTTP_LAYER\") ) {\r",
									"                            let expectedHttpClientConfiguration;\r",
									"                            expectedHttpClientConfiguration = expectedLayerProtocol[\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"];\r",
									"                            let actualHttpClientConfiguration;\r",
									"                            actualHttpClientConfiguration = actualLayerProtocol[\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"];\r",
									"                            pm.test(\"http-client-configuration class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualHttpClientConfiguration).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualHttpClientConfiguration).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualHttpClientConfiguration != undefined) {\r",
									"                                pm.test(\"Provides expected properties in configuration class for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualHttpClientConfiguration[\"application-name\"]).to.equal(expectedHttpClientConfiguration[\"application-name\"]);\r",
									"                                    pm.expect(actualHttpClientConfiguration[\"release-number\"]).to.equal(expectedHttpClientConfiguration[\"release-number\"]);\r",
									"                                });\r",
									"                            }\r",
									"                        } else if (expectedLayerProtocol[\"layer-protocol-name\"].includes(\"tcp-client-interface-1-0:LAYER_PROTOCOL_NAME_TYPE_TCP_LAYER\") ) {\r",
									"                            let expectedTcpClientConfiguration;\r",
									"                            expectedTcpClientConfiguration = expectedLayerProtocol[\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"];\r",
									"                            let actualTcpClientConfiguration;\r",
									"                            actualTcpClientConfiguration = actualLayerProtocol[\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"];\r",
									"                            pm.test(\"tcp-client-configuration class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualTcpClientConfiguration).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualTcpClientConfiguration).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualTcpClientConfiguration != undefined) {\r",
									"                                pm.test(\"Provides expected properties in configuration class for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualTcpClientConfiguration[\"remote-protocol\"]).to.equal(expectedTcpClientConfiguration[\"remote-protocol\"]);\r",
									"                                    pm.expect(JSON.stringify(actualTcpClientConfiguration[\"remote-address\"])).to.equal(JSON.stringify(expectedTcpClientConfiguration[\"remote-address\"]));\r",
									"                                    pm.expect(actualTcpClientConfiguration[\"remote-port\"]).to.equal(expectedTcpClientConfiguration[\"remote-port\"]);\r",
									"                                });\r",
									"                            }\r",
									"                        }\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"\r",
									"\r",
									"\r",
									"        // testcases for forwarding domain\r",
									"\r",
									"        var actualFDList;\r",
									"        actualFDList = actualControlConstruct[\"core-model-1-4:control-construct\"][\"forwarding-domain\"];\r",
									"        pm.test(\"Forwarding domain could be found \" , function () {\r",
									"            pm.expect(actualFDList).to.not.equal(undefined);\r",
									"            pm.expect(Object.keys(actualFDList).length).to.not.equal(0);\r",
									"        });\r",
									"        if(actualFDList != undefined) {\r",
									"            pm.test(\"Provides invariant number (1) of attributes in forwarding-domain\", function () {\r",
									"                pm.expect(Object.keys(actualFDList).length).to.equal(1);\r",
									"            });\r",
									"            pm.test(\"Provides expected uuid '\" + expectedFDList[0][\"uuid\"] +\"' in forwarding-domain\", function () {\r",
									"                pm.expect(actualFDList[0][\"uuid\"]).to.not.equal(undefined);\r",
									"                pm.expect(actualFDList[0][\"uuid\"]).to.equal(expectedFDList[0][\"uuid\"]);\r",
									"                pm.expect(actualFDList[0][\"uuid\"]).to.be.a(\"String\");\r",
									"            });\r",
									"            var expectedForwardingConstructList;\r",
									"            expectedForwardingConstructList = expectedFDList[0][\"forwarding-construct\"];\r",
									"            var actualForwardingConstructList;\r",
									"            actualForwardingConstructList = actualFDList[0][\"forwarding-construct\"];\r",
									"            pm.test(\"Forwarding construct List could be found \" , function () {\r",
									"                pm.expect(actualForwardingConstructList).to.not.equal(undefined);\r",
									"                pm.expect(Object.keys(actualForwardingConstructList).length).to.not.equal(0);\r",
									"            });\r",
									"\r",
									"            if(actualForwardingConstructList != undefined) {\r",
									"                for(let expectedFCIndex=0; expectedFCIndex<expectedForwardingConstructList.length; expectedFCIndex++) {\r",
									"                    let expectedFCInstance;\r",
									"                    expectedFCInstance = expectedForwardingConstructList[expectedFCIndex];\r",
									"                    let expectedFCInstanceForwardingName;\r",
									"                    for(let i=0;i<expectedFCInstance[\"name\"].length;i++) {\r",
									"                        if(expectedFCInstance[\"name\"][i][\"value-name\"] == \"ForwardingName\") {\r",
									"                            expectedFCInstanceForwardingName = expectedFCInstance[\"name\"][i][\"value\"];\r",
									"                        }\r",
									"                    }\r",
									"                    let actualFCInstance;\r",
									"                    actualFCInstance = FindActualFCInstance(expectedFCInstanceForwardingName, actualForwardingConstructList);\r",
									"                    pm.test(\"Forwarding construct '\" + expectedFCInstanceForwardingName + \"' could be found \" , function () {\r",
									"                        pm.expect(actualFCInstance).to.not.equal(undefined);\r",
									"                        pm.expect(Object.keys(actualFCInstance).length).to.not.equal(0);\r",
									"                    });\r",
									"                    if(actualFCInstance != undefined) {\r",
									"                        console.log(\"testing \" + actualFCInstance[\"uuid\"]);\r",
									"                        pm.test(\"Provides expected uuid '\" + expectedFCInstance[\"uuid\"] +\"' in forwarding-construct\", function () {\r",
									"                            pm.expect(actualFCInstance[\"uuid\"]).to.not.equal(undefined);\r",
									"                            pm.expect(actualFCInstance[\"uuid\"]).to.equal(expectedFCInstance[\"uuid\"]);\r",
									"                            pm.expect(actualFCInstance[\"uuid\"]).to.be.a(\"String\");\r",
									"                        });\r",
									"                        let expectedForwardingKindName;\r",
									"                        for(let i=0;i<expectedFCInstance[\"name\"].length;i++) {\r",
									"                            if(expectedFCInstance[\"name\"][i][\"value-name\"] == \"ForwardingKind\") {\r",
									"                                expectedForwardingKindName = expectedFCInstance[\"name\"][i][\"value\"];\r",
									"                            }\r",
									"                        }\r",
									"                        let actualForwardingKindName;\r",
									"                        for(let i=0;i<actualFCInstance[\"name\"].length;i++) {\r",
									"                            if(actualFCInstance[\"name\"][i][\"value-name\"] == \"ForwardingKind\") {\r",
									"                                actualForwardingKindName = actualFCInstance[\"name\"][i][\"value\"];\r",
									"                            }\r",
									"                        }\r",
									"                        pm.test(\"Provides expected forwarding kind '\" + expectedForwardingKindName +\"' in forwarding-construct\", function () {\r",
									"                            pm.expect(actualForwardingKindName).to.not.equal(undefined);\r",
									"                            pm.expect(actualForwardingKindName).to.equal(expectedForwardingKindName);\r",
									"                            pm.expect(actualForwardingKindName).to.be.a(\"String\");\r",
									"                        });\r",
									"                        pm.test(\"FC port could be found in the forwarding-construct '\" + actualFCInstance[\"uuid\"] + \"'\", function () {\r",
									"                            pm.expect(actualFCInstance[\"fc-port\"]).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualFCInstance[\"fc-port\"]).length).to.not.equal(0);\r",
									"                        });\r",
									"                        pm.test(\"Provides expected number of fc-port instances '\" + expectedFCInstance[\"fc-port\"].length +\"' in forwarding-construct\", function () {\r",
									"                            pm.expect(actualFCInstance[\"fc-port\"].length).to.equal(expectedFCInstance[\"fc-port\"].length);\r",
									"                        });\r",
									"                        if( actualFCInstance[\"fc-port\"] != undefined ) {\r",
									"                            let actualFcPortList;\r",
									"                            actualFcPortList = actualFCInstance[\"fc-port\"];\r",
									"                            for ( let expectedFcPortIndex=0; expectedFcPortIndex<expectedFCInstance[\"fc-port\"].length; expectedFcPortIndex++ ) {\r",
									"                                let expectedFCPortInstance;\r",
									"                                expectedFCPortInstance = expectedFCInstance[\"fc-port\"][expectedFcPortIndex];\r",
									"                                let expectedFCPortLocalId;\r",
									"                                expectedFCPortLocalId = expectedFCPortInstance[\"local-id\"];\r",
									"                                let actualFcPortInstance;\r",
									"                                actualFcPortInstance = FindActualFCPortInstance(expectedFCPortLocalId, actualFcPortList);\r",
									"                                pm.test(\"Fc-port of local-id '\" + expectedFCPortLocalId + \"' could be found in actual \" , function () {\r",
									"                                    pm.expect(actualFcPortInstance).to.not.equal(undefined);\r",
									"                                    pm.expect(Object.keys(actualFcPortInstance).length).to.not.equal(0);\r",
									"                                });\r",
									"                                if(actualFcPortInstance!=undefined) {\r",
									"                                    pm.test(\"Provides expected port-direction '\" + expectedFCPortInstance[\"port-direction\"] +\"'\", function () {\r",
									"                                        pm.expect(actualFcPortInstance[\"port-direction\"]).to.not.equal(undefined);\r",
									"                                        pm.expect(actualFcPortInstance[\"port-direction\"]).to.equal(expectedFCPortInstance[\"port-direction\"]);\r",
									"                                    });\r",
									"                                    pm.test(\"Provides expected logical-termination-point '\" + expectedFCPortInstance[\"logical-termination-point\"] +\"'\", function () {\r",
									"                                        pm.expect(actualFcPortInstance[\"logical-termination-point\"]).to.not.equal(undefined);\r",
									"                                        pm.expect(actualFcPortInstance[\"logical-termination-point\"]).to.equal(expectedFCPortInstance[\"logical-termination-point\"]);\r",
									"                                    });\r",
									"                                }\r",
									"                            }\r",
									"                        }\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(error)\r",
									"    console.log(\"! Testing could not be executed.\");\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"function FindActualInstance(expectedUuid, listToBeFiltered) {\r",
									"    let actualInstance;\r",
									"    actualInstance = {};\r",
									"    try {\r",
									"        for( let i=0; i<listToBeFiltered.length; i++ ) {\r",
									"            let sampleUuid;\r",
									"            sampleUuid = listToBeFiltered[i][\"uuid\"];\r",
									"            if(sampleUuid == expectedUuid) {\r",
									"                actualInstance = listToBeFiltered[i];\r",
									"                return actualInstance;\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        console.log(error);\r",
									"        console.log(\"! Exception in function FindActualInstance. \");\r",
									"    }\r",
									"    return undefined;\r",
									"}\r",
									"\r",
									"function FindActualFCInstance(expectedFCInstanceForwardingName, actualForwardingConstructList) {\r",
									"    let actualFCInstance;\r",
									"    actualFCInstance = {};\r",
									"    try {\r",
									"        for( let i=0; i<actualForwardingConstructList.length; i++ ) {\r",
									"            for(let j=0; j<actualForwardingConstructList[i][\"name\"].length; j++) {               \r",
									"                if(actualForwardingConstructList[i][\"name\"][j][\"value\"] == expectedFCInstanceForwardingName) {\r",
									"                    actualFCInstance = actualForwardingConstructList[i];\r",
									"                    return actualFCInstance;\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        console.log(\"! Exception in function FindActualFCInstance. \");\r",
									"    }\r",
									"    return undefined;\r",
									"}\r",
									"\r",
									"function FindActualFCPortInstance(localId, fcPortList) {\r",
									"    let fcPortInstance;\r",
									"    fcPortInstance = {};\r",
									"    try {\r",
									"        let sampleLocalId;\r",
									"        for( let i=0; i<fcPortList.length; i++ ) {\r",
									"            sampleLocalId = fcPortList[i][\"local-id\"];\r",
									"            if(sampleLocalId == localId) {\r",
									"                fcPortInstance = fcPortList[i];\r",
									"                return fcPortInstance; \r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        console.log(\"! Exception in function FindActualFCPortInstance. \");\r",
									"    }\r",
									"}\r",
									"\r",
									"function areEqual(array1, array2) {\r",
									"  if (array1.length === array2.length) {\r",
									"    return array1.every(element => {\r",
									"      if (array2.includes(element)) {\r",
									"        return true;\r",
									"      }\r",
									"      return false;\r",
									"    });\r",
									"  }\r",
									"  return false;\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-mock-response-code",
								"value": "200",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clearing all data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"====================================== Clearing collection data ====================================\");\r",
									"console.log(\"==========================================================================================\");\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    \r",
									"    let URI;\r",
									"    URI = pm.environment.get(\"dummyUri\");\r",
									"\r",
									"    pm.variables.set(\"uri\", URI);\r",
									"    pm.request.headers.upsert({ key: \"Authorization\", value: \"\" });\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Local variables could not be set.\");\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/****************************************************************************************\r",
									"* Clearing Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.environment.clear();\r",
									"    pm.collectionVariables.clear();\r",
									"    pm.variables.clear();\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Collection variables could not be set.\");\r",
									"}\r",
									"console.log(pm.collectionVariables)\r",
									"console.log(pm.environment)\r",
									"console.log(pm.variables)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// pm.request.headers.upsert({ ",
					"//     key: \"Connection\",",
					"//     value: \"Close\" ",
					"// });"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}